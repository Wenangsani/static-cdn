 [
  {
    "number": "91",
    "type": "reading",
    "direction": "<b>SECTION 3</b>\r\n<b>READING COMPREHENSION</b>\r\n\r\nThis section is designed to measure your ability to read and understand short passages similar in\r\ntopic and style to those that students are likely to encounter in North American universities and\r\ncolleges. This section contains reading passages and questions about the passages.\r\n\r\n<b><u>Directions</u></b>: In this section you will read several passages. Each one is followed by a number of\r\nquestions about it. You are to choose the one best answer, (A), (B), (C), or (D), to each question. Then,\r\non your answer sheet, find the number of the question and fill in the space that corresponds to the\r\nletter of the answer you have chosen.\r\n\r\nAnswer all questions about the information in a passage on the basis of what is stated or implied\r\nin that passage.\r\n\r\nRead the following passage:\r\n\r\nJohn Quincy Adams, who served as the sixth president of the United States from 1825\r\nto 1829, is today recognized for his masterful statesmanship and diplomacy. He dedicated his\r\nlife to public service, both in the presidency and in the various other political offices that he\r\n\r\nheld. Throughout his political career he demonstrated his unswerving belief in freedom of\r\nLine (5) speech, the antislavery cause, and the right of Americans to be free from European and Asian\r\ndomination.\r\n\r\n<b>Example I</b>\r\n\r\nTo what did John Quincy Adams devote his life?\r\n(A) Improving his personal life\r\n(B) Serving the public\r\n(C) Increasing his fortune\r\n(D) Working on his private business\r\n\r\nAccording to the passage, John Quincy Adams “dedicated his life to public service.” Therefore, you\r\nshould choose answer (B).\r\n\r\n<b>Example II</b>\r\nIn line 4, the word “unswerving” is closest in meaning to\r\n\r\n(A) moveable\r\n(B) insignificant\r\n(C) unchanging\r\n(D) diplomatic\r\n\r\nThe passage states that John Quincy Adams demonstrated his unswerving belief “throughout his\r\ncareer.” This implies that the belief did not change. Therefore, you should choose answer (C).\r\n\r\n",
    "question": "Why couldn't Elizabeth Blackwell realize her dream of becoming a surgeon?",
    "text": "<b>Questions 91-100</b>\r\n\r\n     Elizabeth Blackwell was born in England in 1821 and \r\nemigrated to New York City when she was ten years old. \r\nOne day she decided that she wanted to become a doctor. \r\nThat was nearly impossible for a woman in the middle of the \r\n(5) nineteenth century. After writing many letters seeking \r\nadmission to medical schools, she was finally accepted by a \r\ndoctor in Philadelphia. So determined was she that she \r\ntaught school and gave music lessons to earn money for her \r\ntuition.\r\n(10)   In 1849, after graduation from medical school, she decided \r\nto further her education in Paris. She wanted to be a \r\nsurgeon, but a serious eye infection forced her to abandon \r\nthe idea.\r\n     Upon returning to the United States, she found it difficult \r\n(15) to start her own practice because she was a woman. By 1857, \r\nElizabeth and her sister, also a doctor, along with another \r\nfemale doctor, managed to open a new hospital, the first for \r\nwomen and children. Besides being the first female physician \r\nin the United States and founding her own hospital, she \r\n(20) also established the first medical school for women.",
    "ans_a": "She couldn't get admitted to medical school.",
    "ans_b": "She decided to further her education in Paris.",
    "ans_c": "A serious eye infection halted her quest.",
    "ans_d": "It was difficult for her to start a practice in the United States.",
    "answer": "C"
  },
  {
    "number": "92",
    "type": "reading",
    "question": "What main obstacle almost destroyed Elizabeth's chances for becoming a doctor?",
    "text": "<b>Questions 91-100</b>\r\n\r\n     Elizabeth Blackwell was born in England in 1821 and \r\nemigrated to New York City when she was ten years old. \r\nOne day she decided that she wanted to become a doctor. \r\nThat was nearly impossible for a woman in the middle of the \r\n(5) nineteenth century. After writing many letters seeking \r\nadmission to medical schools, she was finally accepted by a \r\ndoctor in Philadelphia. So determined was she that she \r\ntaught school and gave music lessons to earn money for her \r\ntuition.\r\n(10)   In 1849, after graduation from medical school, she decided \r\nto further her education in Paris. She wanted to be a \r\nsurgeon, but a serious eye infection forced her to abandon \r\nthe idea.\r\n     Upon returning to the United States, she found it difficult \r\n(15) to start her own practice because she was a woman. By 1857, \r\nElizabeth and her sister, also a doctor, along with another \r\nfemale doctor, managed to open a new hospital, the first for \r\nwomen and children. Besides being the first female physician \r\nin the United States and founding her own hospital, she \r\n(20) also established the first medical school for women.",
    "ans_a": "She was a woman.",
    "ans_b": "She wrote too many letters.",
    "ans_c": "She couldn't graduate from medical school.",
    "ans_d": "She couldn't establish her hospital.",
    "answer": "A"
  },
  {
    "number": "93",
    "type": "reading",
    "question": "How many years elapsed between her graduation from medical school and the opening of her hospital?",
    "text": "<b>Questions 91-100</b>\r\n\r\n     Elizabeth Blackwell was born in England in 1821 and \r\nemigrated to New York City when she was ten years old. \r\nOne day she decided that she wanted to become a doctor. \r\nThat was nearly impossible for a woman in the middle of the \r\n(5) nineteenth century. After writing many letters seeking \r\nadmission to medical schools, she was finally accepted by a \r\ndoctor in Philadelphia. So determined was she that she \r\ntaught school and gave music lessons to earn money for her \r\ntuition.\r\n(10)   In 1849, after graduation from medical school, she decided \r\nto further her education in Paris. She wanted to be a \r\nsurgeon, but a serious eye infection forced her to abandon \r\nthe idea.\r\n     Upon returning to the United States, she found it difficult \r\n(15) to start her own practice because she was a woman. By 1857, \r\nElizabeth and her sister, also a doctor, along with another \r\nfemale doctor, managed to open a new hospital, the first for \r\nwomen and children. Besides being the first female physician \r\nin the United States and founding her own hospital, she \r\n(20) also established the first medical school for women.",
    "ans_a": "8",
    "ans_b": "10",
    "ans_c": "19",
    "ans_d": "36",
    "answer": "A"
  },
  {
    "number": "94",
    "type": "reading",
    "question": "All of the following are \"firsts\" in the life of Elizabeth Blackwell EXCEPT",
    "text": "<b>Questions 91-100</b>\r\n\r\n     Elizabeth Blackwell was born in England in 1821 and \r\nemigrated to New York City when she was ten years old. \r\nOne day she decided that she wanted to become a doctor. \r\nThat was nearly impossible for a woman in the middle of the \r\n(5) nineteenth century. After writing many letters seeking \r\nadmission to medical schools, she was finally accepted by a \r\ndoctor in Philadelphia. So determined was she that she \r\ntaught school and gave music lessons to earn money for her \r\ntuition.\r\n(10)   In 1849, after graduation from medical school, she decided \r\nto further her education in Paris. She wanted to be a \r\nsurgeon, but a serious eye infection forced her to abandon \r\nthe idea.\r\n     Upon returning to the United States, she found it difficult \r\n(15) to start her own practice because she was a woman. By 1857, \r\nElizabeth and her sister, also a doctor, along with another \r\nfemale doctor, managed to open a new hospital, the first for \r\nwomen and children. Besides being the first female physician \r\nin the United States and founding her own hospital, she \r\n(20) also established the first medical school for women.",
    "ans_a": "she became the first female physician in the United States",
    "ans_b": "she was the first woman surgeon in the United States",
    "ans_c": "she and several other women founded the first hospital for women and children",
    "ans_d": "she established the first medical school for women",
    "answer": "B"
  },
  {
    "number": "95",
    "type": "reading",
    "question": "How old was Elizabeth Blackwell when she graduated from medical school?",
    "text": "<b>Questions 91-100</b>\r\n\r\n     Elizabeth Blackwell was born in England in 1821 and \r\nemigrated to New York City when she was ten years old. \r\nOne day she decided that she wanted to become a doctor. \r\nThat was nearly impossible for a woman in the middle of the \r\n(5) nineteenth century. After writing many letters seeking \r\nadmission to medical schools, she was finally accepted by a \r\ndoctor in Philadelphia. So determined was she that she \r\ntaught school and gave music lessons to earn money for her \r\ntuition.\r\n(10)   In 1849, after graduation from medical school, she decided \r\nto further her education in Paris. She wanted to be a \r\nsurgeon, but a serious eye infection forced her to abandon \r\nthe idea.\r\n     Upon returning to the United States, she found it difficult \r\n(15) to start her own practice because she was a woman. By 1857, \r\nElizabeth and her sister, also a doctor, along with another \r\nfemale doctor, managed to open a new hospital, the first for \r\nwomen and children. Besides being the first female physician \r\nin the United States and founding her own hospital, she \r\n(20) also established the first medical school for women.",
    "ans_a": "10",
    "ans_b": "21",
    "ans_c": "28",
    "ans_d": "36",
    "answer": "C"
  },
  {
    "number": "96",
    "type": "reading",
    "question": "The word \"abandon\" in line 12 is closest in meaning to",
    "text": "<b>Questions 91-100</b>\r\n\r\n     Elizabeth Blackwell was born in England in 1821 and \r\nemigrated to New York City when she was ten years old. \r\nOne day she decided that she wanted to become a doctor. \r\nThat was nearly impossible for a woman in the middle of the \r\n(5) nineteenth century. After writing many letters seeking \r\nadmission to medical schools, she was finally accepted by a \r\ndoctor in Philadelphia. So determined was she that she \r\ntaught school and gave music lessons to earn money for her \r\ntuition.\r\n(10)   In 1849, after graduation from medical school, she decided \r\nto further her education in Paris. She wanted to be a \r\nsurgeon, but a serious eye infection forced her to abandon \r\nthe idea.\r\n     Upon returning to the United States, she found it difficult \r\n(15) to start her own practice because she was a woman. By 1857, \r\nElizabeth and her sister, also a doctor, along with another \r\nfemale doctor, managed to open a new hospital, the first for \r\nwomen and children. Besides being the first female physician \r\nin the United States and founding her own hospital, she \r\n(20) also established the first medical school for women.",
    "ans_a": "undertake",
    "ans_b": "give up",
    "ans_c": "continue",
    "ans_d": "look into",
    "answer": "B"
  },
  {
    "number": "97",
    "type": "reading",
    "question": "What is the main idea of this passage?",
    "text": "<b>Questions 91-100</b>\r\n\r\n     Elizabeth Blackwell was born in England in 1821 and \r\nemigrated to New York City when she was ten years old. \r\nOne day she decided that she wanted to become a doctor. \r\nThat was nearly impossible for a woman in the middle of the \r\n(5) nineteenth century. After writing many letters seeking \r\nadmission to medical schools, she was finally accepted by a \r\ndoctor in Philadelphia. So determined was she that she \r\ntaught school and gave music lessons to earn money for her \r\ntuition.\r\n(10)   In 1849, after graduation from medical school, she decided \r\nto further her education in Paris. She wanted to be a \r\nsurgeon, but a serious eye infection forced her to abandon \r\nthe idea.\r\n     Upon returning to the United States, she found it difficult \r\n(15) to start her own practice because she was a woman. By 1857, \r\nElizabeth and her sister, also a doctor, along with another \r\nfemale doctor, managed to open a new hospital, the first for \r\nwomen and children. Besides being the first female physician \r\nin the United States and founding her own hospital, she \r\n(20) also established the first medical school for women.",
    "ans_a": "Elizabeth Blackwell overcame serious obstacles to become the first woman doctor in the United States.",
    "ans_b": "Elizabeth Blackwell had to abandon her plans to become a doctor because of an eye infection. ",
    "ans_c": "Elizabeth Blackwell even taught music to pay for her medical studies.",
    "ans_d": "Elizabeth Blackwell founded the first medical school for women.",
    "answer": "A"
  },
  {
    "number": "98",
    "type": "reading",
    "question": "The word \"founding\" in line 19 means most nearly the same as",
    "text": "<b>Questions 91-100</b>\r\n\r\n     Elizabeth Blackwell was born in England in 1821 and \r\nemigrated to New York City when she was ten years old. \r\nOne day she decided that she wanted to become a doctor. \r\nThat was nearly impossible for a woman in the middle of the \r\n(5) nineteenth century. After writing many letters seeking \r\nadmission to medical schools, she was finally accepted by a \r\ndoctor in Philadelphia. So determined was she that she \r\ntaught school and gave music lessons to earn money for her \r\ntuition.\r\n(10)   In 1849, after graduation from medical school, she decided \r\nto further her education in Paris. She wanted to be a \r\nsurgeon, but a serious eye infection forced her to abandon \r\nthe idea.\r\n     Upon returning to the United States, she found it difficult \r\n(15) to start her own practice because she was a woman. By 1857, \r\nElizabeth and her sister, also a doctor, along with another \r\nfemale doctor, managed to open a new hospital, the first for \r\nwomen and children. Besides being the first female physician \r\nin the United States and founding her own hospital, she \r\n(20) also established the first medical school for women.",
    "ans_a": "locating",
    "ans_b": "looking for",
    "ans_c": "establishing",
    "ans_d": "buying",
    "answer": "C"
  },
  {
    "number": "99",
    "type": "reading",
    "question": "Why was it nearly impossible for Elizabeth Blackwell to get into medical school?",
    "text": "<b>Questions 91-100</b>\r\n\r\n     Elizabeth Blackwell was born in England in 1821 and \r\nemigrated to New York City when she was ten years old. \r\nOne day she decided that she wanted to become a doctor. \r\nThat was nearly impossible for a woman in the middle of the \r\n(5) nineteenth century. After writing many letters seeking \r\nadmission to medical schools, she was finally accepted by a \r\ndoctor in Philadelphia. So determined was she that she \r\ntaught school and gave music lessons to earn money for her \r\ntuition.\r\n(10)   In 1849, after graduation from medical school, she decided \r\nto further her education in Paris. She wanted to be a \r\nsurgeon, but a serious eye infection forced her to abandon \r\nthe idea.\r\n     Upon returning to the United States, she found it difficult \r\n(15) to start her own practice because she was a woman. By 1857, \r\nElizabeth and her sister, also a doctor, along with another \r\nfemale doctor, managed to open a new hospital, the first for \r\nwomen and children. Besides being the first female physician \r\nin the United States and founding her own hospital, she \r\n(20) also established the first medical school for women.",
    "ans_a": "She had a serious eye infection",
    "ans_b": "She had little or no money to pay tuition.",
    "ans_c": "She wanted to be part of a profession that no woman had ever entered before.",
    "ans_d": "Her family didn't want her to be a doctor.",
    "answer": "C"
  },
  {
    "number": "100",
    "type": "reading",
    "question": "The reason Elizabeth Blackwell could not become a surgeon is explained in lines",
    "text": "<b>Questions 91-100</b>\r\n\r\n     Elizabeth Blackwell was born in England in 1821 and \r\nemigrated to New York City when she was ten years old. \r\nOne day she decided that she wanted to become a doctor. \r\nThat was nearly impossible for a woman in the middle of the \r\n(5) nineteenth century. After writing many letters seeking \r\nadmission to medical schools, she was finally accepted by a \r\ndoctor in Philadelphia. So determined was she that she \r\ntaught school and gave music lessons to earn money for her \r\ntuition.\r\n(10)   In 1849, after graduation from medical school, she decided \r\nto further her education in Paris. She wanted to be a \r\nsurgeon, but a serious eye infection forced her to abandon \r\nthe idea.\r\n     Upon returning to the United States, she found it difficult \r\n(15) to start her own practice because she was a woman. By 1857, \r\nElizabeth and her sister, also a doctor, along with another \r\nfemale doctor, managed to open a new hospital, the first for \r\nwomen and children. Besides being the first female physician \r\nin the United States and founding her own hospital, she \r\n(20) also established the first medical school for women.",
    "ans_a": "4-5",
    "ans_b": "8-9",
    "ans_c": "11-13",
    "ans_d": "14-15",
    "answer": "C"
  },
  {
    "number": "101",
    "type": "reading",
    "question": "Why does the author most likely mention George Washington in the first paragraph?",
    "text": "<b>Questions 101-111</b>\r\n\r\n     It is said that George Washington was one of the first to realize\r\nhow important the building of canals would be to the nation’s\r\ndevelopment. In fact, before he became President, he headed the\r\nfirst company in the United States to build a canal which was to\r\n(5) connect the Ohio and Potomac rivers. It was never completed, but it\r\nshowed the nation the feasibility of canals. As the country\r\nexpanded westward, settlers In western New York, Pennsylvania, anid\r\nOhio needed a means to ship goods. Canals linking natural waterways\r\nseemed to offer an effective solution.\r\n(10)   In 1791 engincers commissioned by the state of New York\r\ninvestigated the possibility of a canal between Albany on the\r\nHudson River and Buffalo on Lake Eric, which would link the Great\r\nLakes area with the Atlantic seacoast. It would avoid the\r\nmountains that served as a barrier to canals from the Delaware\r\n(15) and Potomac rivers.\r\nThe first attempt to dig the canal, to be called the Erie Canal,\r\nwis made by private companies, but only a comparatively small\r\nportion was built before the project was halted for lack of funds.\r\n     The cost of the project was an estimated five million dollars, an\r\n(20) enormous amount for those days. There was some On-again-olf-again\r\nFederal funding, but the War of 1812 put an end to this. In 1817\r\nDeWitt Clinton was elected Governor of New York and persuaded the\r\nstate bo finance and build the canal. It was completed in 1825,\r\ncosting two million dollars more than expected.\r\n(25)    The canal rapidly lived up to its sponsors’ faith, quickly paving\r\nfor itself through tolls. It was far more economical than any other\r\nform of transportation at the time. It permitted trade between the\r\nGreat Lake region and East Coast, robbing the Mississippi River of\r\nmuch of its traffic. It allowed New York to supplant Boston,\r\n(30) Philadelphia, and other Eastern cities as the chief center of both\r\ndomestic and foreign commerce. Cities sprang up along the canal.\r\nIt also contributed in a number of ways to the North's victory over\r\nthe South in the Civil War.\r\n     An expansion of the canal was planned in 1849. Increased traffic\r\n(35) would undoubtedly have warranted its construction had it not been\r\nfor the development of the railroads.",
    "ans_a": "He was President at the time the Erie Canal was built.",
    "ans_b": "He was involved in pioneering efforts to build canals.",
    "ans_c": "[le successfully opened the first canal in the United States.",
    "ans_d": "He commissioned engineers to study the possibility of building the Erie Canal.",
    "answer": "B"
  },
  {
    "number": "102",
    "type": "reading",
    "question": "The word “feasibility” in line 6 is closest in meaning to",
    "text": "<b>Questions 101-111</b>\r\n\r\n     It is said that George Washington was one of the first to realize\r\nhow important the building of canals would be to the nation’s\r\ndevelopment. In fact, before he became President, he headed the\r\nfirst company in the United States to build a canal which was to\r\n(5) connect the Ohio and Potomac rivers. It was never completed, but it\r\nshowed the nation the feasibility of canals. As the country\r\nexpanded westward, settlers In western New York, Pennsylvania, anid\r\nOhio needed a means to ship goods. Canals linking natural waterways\r\nseemed to offer an effective solution.\r\n(10)   In 1791 engincers commissioned by the state of New York\r\ninvestigated the possibility of a canal between Albany on the\r\nHudson River and Buffalo on Lake Eric, which would link the Great\r\nLakes area with the Atlantic seacoast. It would avoid the\r\nmountains that served as a barrier to canals from the Delaware\r\n(15) and Potomac rivers.\r\nThe first attempt to dig the canal, to be called the Erie Canal,\r\nwis made by private companies, but only a comparatively small\r\nportion was built before the project was halted for lack of funds.\r\n     The cost of the project was an estimated five million dollars, an\r\n(20) enormous amount for those days. There was some On-again-olf-again\r\nFederal funding, but the War of 1812 put an end to this. In 1817\r\nDeWitt Clinton was elected Governor of New York and persuaded the\r\nstate bo finance and build the canal. It was completed in 1825,\r\ncosting two million dollars more than expected.\r\n(25)    The canal rapidly lived up to its sponsors’ faith, quickly paving\r\nfor itself through tolls. It was far more economical than any other\r\nform of transportation at the time. It permitted trade between the\r\nGreat Lake region and East Coast, robbing the Mississippi River of\r\nmuch of its traffic. It allowed New York to supplant Boston,\r\n(30) Philadelphia, and other Eastern cities as the chief center of both\r\ndomestic and foreign commerce. Cities sprang up along the canal.\r\nIt also contributed in a number of ways to the North's victory over\r\nthe South in the Civil War.\r\n     An expansion of the canal was planned in 1849. Increased traffic\r\n(35) would undoubtedly have warranted its construction had it not been\r\nfor the development of the railroads.",
    "ans_a": "profitability",
    "ans_b": "difficulty",
    "ans_c": "possibility",
    "ans_d": "capability",
    "answer": "C"
  },
  {
    "number": "103",
    "type": "reading",
    "question": "According to the passage, the Erie Canal connected the",
    "text": "<b>Questions 101-111</b>\r\n\r\n     It is said that George Washington was one of the first to realize\r\nhow important the building of canals would be to the nation’s\r\ndevelopment. In fact, before he became President, he headed the\r\nfirst company in the United States to build a canal which was to\r\n(5) connect the Ohio and Potomac rivers. It was never completed, but it\r\nshowed the nation the feasibility of canals. As the country\r\nexpanded westward, settlers In western New York, Pennsylvania, anid\r\nOhio needed a means to ship goods. Canals linking natural waterways\r\nseemed to offer an effective solution.\r\n(10)   In 1791 engincers commissioned by the state of New York\r\ninvestigated the possibility of a canal between Albany on the\r\nHudson River and Buffalo on Lake Eric, which would link the Great\r\nLakes area with the Atlantic seacoast. It would avoid the\r\nmountains that served as a barrier to canals from the Delaware\r\n(15) and Potomac rivers.\r\nThe first attempt to dig the canal, to be called the Erie Canal,\r\nwis made by private companies, but only a comparatively small\r\nportion was built before the project was halted for lack of funds.\r\n     The cost of the project was an estimated five million dollars, an\r\n(20) enormous amount for those days. There was some On-again-olf-again\r\nFederal funding, but the War of 1812 put an end to this. In 1817\r\nDeWitt Clinton was elected Governor of New York and persuaded the\r\nstate bo finance and build the canal. It was completed in 1825,\r\ncosting two million dollars more than expected.\r\n(25)    The canal rapidly lived up to its sponsors’ faith, quickly paving\r\nfor itself through tolls. It was far more economical than any other\r\nform of transportation at the time. It permitted trade between the\r\nGreat Lake region and East Coast, robbing the Mississippi River of\r\nmuch of its traffic. It allowed New York to supplant Boston,\r\n(30) Philadelphia, and other Eastern cities as the chief center of both\r\ndomestic and foreign commerce. Cities sprang up along the canal.\r\nIt also contributed in a number of ways to the North's victory over\r\nthe South in the Civil War.\r\n     An expansion of the canal was planned in 1849. Increased traffic\r\n(35) would undoubtedly have warranted its construction had it not been\r\nfor the development of the railroads.",
    "ans_a": "Potomac and Ohio rivers",
    "ans_b": "Hudson River and Lake Erie",
    "ans_c": "Delaware and Potomac rivers",
    "ans_d": "Atlantic Ocean and the Hudson River",
    "answer": "B"
  },
  {
    "number": "104",
    "type": "reading",
    "question": "Which of the following is closest in meaning to the word “comparatively” in line 17?",
    "text": "<b>Questions 101-111</b>\r\n\r\n     It is said that George Washington was one of the first to realize\r\nhow important the building of canals would be to the nation’s\r\ndevelopment. In fact, before he became President, he headed the\r\nfirst company in the United States to build a canal which was to\r\n(5) connect the Ohio and Potomac rivers. It was never completed, but it\r\nshowed the nation the feasibility of canals. As the country\r\nexpanded westward, settlers In western New York, Pennsylvania, anid\r\nOhio needed a means to ship goods. Canals linking natural waterways\r\nseemed to offer an effective solution.\r\n(10)   In 1791 engincers commissioned by the state of New York\r\ninvestigated the possibility of a canal between Albany on the\r\nHudson River and Buffalo on Lake Eric, which would link the Great\r\nLakes area with the Atlantic seacoast. It would avoid the\r\nmountains that served as a barrier to canals from the Delaware\r\n(15) and Potomac rivers.\r\nThe first attempt to dig the canal, to be called the Erie Canal,\r\nwis made by private companies, but only a comparatively small\r\nportion was built before the project was halted for lack of funds.\r\n     The cost of the project was an estimated five million dollars, an\r\n(20) enormous amount for those days. There was some On-again-olf-again\r\nFederal funding, but the War of 1812 put an end to this. In 1817\r\nDeWitt Clinton was elected Governor of New York and persuaded the\r\nstate bo finance and build the canal. It was completed in 1825,\r\ncosting two million dollars more than expected.\r\n(25)    The canal rapidly lived up to its sponsors’ faith, quickly paving\r\nfor itself through tolls. It was far more economical than any other\r\nform of transportation at the time. It permitted trade between the\r\nGreat Lake region and East Coast, robbing the Mississippi River of\r\nmuch of its traffic. It allowed New York to supplant Boston,\r\n(30) Philadelphia, and other Eastern cities as the chief center of both\r\ndomestic and foreign commerce. Cities sprang up along the canal.\r\nIt also contributed in a number of ways to the North's victory over\r\nthe South in the Civil War.\r\n     An expansion of the canal was planned in 1849. Increased traffic\r\n(35) would undoubtedly have warranted its construction had it not been\r\nfor the development of the railroads.",
    "ans_a": "Relatively",
    "ans_b": "Contrarily",
    "ans_c": "Incredibly",
    "ans_d": "Considerably",
    "answer": "A"
  },
  {
    "number": "105",
    "type": "reading",
    "question": "The phrase “on-again-off-again\" in line 20 could be replaced by which of the following with the least change in meaning?",
    "text": "<b>Questions 101-111</b>\r\n\r\n     It is said that George Washington was one of the first to realize\r\nhow important the building of canals would be to the nation’s\r\ndevelopment. In fact, before he became President, he headed the\r\nfirst company in the United States to build a canal which was to\r\n(5) connect the Ohio and Potomac rivers. It was never completed, but it\r\nshowed the nation the feasibility of canals. As the country\r\nexpanded westward, settlers In western New York, Pennsylvania, anid\r\nOhio needed a means to ship goods. Canals linking natural waterways\r\nseemed to offer an effective solution.\r\n(10)   In 1791 engincers commissioned by the state of New York\r\ninvestigated the possibility of a canal between Albany on the\r\nHudson River and Buffalo on Lake Eric, which would link the Great\r\nLakes area with the Atlantic seacoast. It would avoid the\r\nmountains that served as a barrier to canals from the Delaware\r\n(15) and Potomac rivers.\r\nThe first attempt to dig the canal, to be called the Erie Canal,\r\nwis made by private companies, but only a comparatively small\r\nportion was built before the project was halted for lack of funds.\r\n     The cost of the project was an estimated five million dollars, an\r\n(20) enormous amount for those days. There was some On-again-olf-again\r\nFederal funding, but the War of 1812 put an end to this. In 1817\r\nDeWitt Clinton was elected Governor of New York and persuaded the\r\nstate bo finance and build the canal. It was completed in 1825,\r\ncosting two million dollars more than expected.\r\n(25)    The canal rapidly lived up to its sponsors’ faith, quickly paving\r\nfor itself through tolls. It was far more economical than any other\r\nform of transportation at the time. It permitted trade between the\r\nGreat Lake region and East Coast, robbing the Mississippi River of\r\nmuch of its traffic. It allowed New York to supplant Boston,\r\n(30) Philadelphia, and other Eastern cities as the chief center of both\r\ndomestic and foreign commerce. Cities sprang up along the canal.\r\nIt also contributed in a number of ways to the North's victory over\r\nthe South in the Civil War.\r\n     An expansion of the canal was planned in 1849. Increased traffic\r\n(35) would undoubtedly have warranted its construction had it not been\r\nfor the development of the railroads.",
    "ans_a": "Intermittent",
    "ans_b": "Unsolicited",
    "ans_c": "Incftectual",
    "ans_d": "Gradual",
    "answer": "A"
  },
  {
    "number": "106",
    "type": "reading",
    "question": "The completion of the Erie Canal was financed by",
    "text": "<b>Questions 101-111</b>\r\n\r\n     It is said that George Washington was one of the first to realize\r\nhow important the building of canals would be to the nation’s\r\ndevelopment. In fact, before he became President, he headed the\r\nfirst company in the United States to build a canal which was to\r\n(5) connect the Ohio and Potomac rivers. It was never completed, but it\r\nshowed the nation the feasibility of canals. As the country\r\nexpanded westward, settlers In western New York, Pennsylvania, anid\r\nOhio needed a means to ship goods. Canals linking natural waterways\r\nseemed to offer an effective solution.\r\n(10)   In 1791 engincers commissioned by the state of New York\r\ninvestigated the possibility of a canal between Albany on the\r\nHudson River and Buffalo on Lake Eric, which would link the Great\r\nLakes area with the Atlantic seacoast. It would avoid the\r\nmountains that served as a barrier to canals from the Delaware\r\n(15) and Potomac rivers.\r\nThe first attempt to dig the canal, to be called the Erie Canal,\r\nwis made by private companies, but only a comparatively small\r\nportion was built before the project was halted for lack of funds.\r\n     The cost of the project was an estimated five million dollars, an\r\n(20) enormous amount for those days. There was some On-again-olf-again\r\nFederal funding, but the War of 1812 put an end to this. In 1817\r\nDeWitt Clinton was elected Governor of New York and persuaded the\r\nstate bo finance and build the canal. It was completed in 1825,\r\ncosting two million dollars more than expected.\r\n(25)    The canal rapidly lived up to its sponsors’ faith, quickly paving\r\nfor itself through tolls. It was far more economical than any other\r\nform of transportation at the time. It permitted trade between the\r\nGreat Lake region and East Coast, robbing the Mississippi River of\r\nmuch of its traffic. It allowed New York to supplant Boston,\r\n(30) Philadelphia, and other Eastern cities as the chief center of both\r\ndomestic and foreign commerce. Cities sprang up along the canal.\r\nIt also contributed in a number of ways to the North's victory over\r\nthe South in the Civil War.\r\n     An expansion of the canal was planned in 1849. Increased traffic\r\n(35) would undoubtedly have warranted its construction had it not been\r\nfor the development of the railroads.",
    "ans_a": "the state of New York",
    "ans_b": "private companies",
    "ans_c": "the federal government",
    "ans_d": "DeWitt Clinton",
    "answer": "A"
  },
  {
    "number": "107",
    "type": "reading",
    "question": "The actual cost of building the Erie Canal was",
    "text": "<b>Questions 101-111</b>\r\n\r\n     It is said that George Washington was one of the first to realize\r\nhow important the building of canals would be to the nation’s\r\ndevelopment. In fact, before he became President, he headed the\r\nfirst company in the United States to build a canal which was to\r\n(5) connect the Ohio and Potomac rivers. It was never completed, but it\r\nshowed the nation the feasibility of canals. As the country\r\nexpanded westward, settlers In western New York, Pennsylvania, anid\r\nOhio needed a means to ship goods. Canals linking natural waterways\r\nseemed to offer an effective solution.\r\n(10)   In 1791 engincers commissioned by the state of New York\r\ninvestigated the possibility of a canal between Albany on the\r\nHudson River and Buffalo on Lake Eric, which would link the Great\r\nLakes area with the Atlantic seacoast. It would avoid the\r\nmountains that served as a barrier to canals from the Delaware\r\n(15) and Potomac rivers.\r\nThe first attempt to dig the canal, to be called the Erie Canal,\r\nwis made by private companies, but only a comparatively small\r\nportion was built before the project was halted for lack of funds.\r\n     The cost of the project was an estimated five million dollars, an\r\n(20) enormous amount for those days. There was some On-again-olf-again\r\nFederal funding, but the War of 1812 put an end to this. In 1817\r\nDeWitt Clinton was elected Governor of New York and persuaded the\r\nstate bo finance and build the canal. It was completed in 1825,\r\ncosting two million dollars more than expected.\r\n(25)    The canal rapidly lived up to its sponsors’ faith, quickly paving\r\nfor itself through tolls. It was far more economical than any other\r\nform of transportation at the time. It permitted trade between the\r\nGreat Lake region and East Coast, robbing the Mississippi River of\r\nmuch of its traffic. It allowed New York to supplant Boston,\r\n(30) Philadelphia, and other Eastern cities as the chief center of both\r\ndomestic and foreign commerce. Cities sprang up along the canal.\r\nIt also contributed in a number of ways to the North's victory over\r\nthe South in the Civil War.\r\n     An expansion of the canal was planned in 1849. Increased traffic\r\n(35) would undoubtedly have warranted its construction had it not been\r\nfor the development of the railroads.",
    "ans_a": "five million dollars",
    "ans_b": "less than had been estimated",
    "ans_c": "seven million dollars",
    "ans_d": "more than could be repaid",
    "answer": "C"
  },
  {
    "number": "108",
    "type": "reading",
    "question": "The word “tolls\" in line 26 is closest in meaning to which of the following?",
    "text": "<b>Questions 101-111</b>\r\n\r\n     It is said that George Washington was one of the first to realize\r\nhow important the building of canals would be to the nation’s\r\ndevelopment. In fact, before he became President, he headed the\r\nfirst company in the United States to build a canal which was to\r\n(5) connect the Ohio and Potomac rivers. It was never completed, but it\r\nshowed the nation the feasibility of canals. As the country\r\nexpanded westward, settlers In western New York, Pennsylvania, anid\r\nOhio needed a means to ship goods. Canals linking natural waterways\r\nseemed to offer an effective solution.\r\n(10)   In 1791 engincers commissioned by the state of New York\r\ninvestigated the possibility of a canal between Albany on the\r\nHudson River and Buffalo on Lake Eric, which would link the Great\r\nLakes area with the Atlantic seacoast. It would avoid the\r\nmountains that served as a barrier to canals from the Delaware\r\n(15) and Potomac rivers.\r\nThe first attempt to dig the canal, to be called the Erie Canal,\r\nwis made by private companies, but only a comparatively small\r\nportion was built before the project was halted for lack of funds.\r\n     The cost of the project was an estimated five million dollars, an\r\n(20) enormous amount for those days. There was some On-again-olf-again\r\nFederal funding, but the War of 1812 put an end to this. In 1817\r\nDeWitt Clinton was elected Governor of New York and persuaded the\r\nstate bo finance and build the canal. It was completed in 1825,\r\ncosting two million dollars more than expected.\r\n(25)    The canal rapidly lived up to its sponsors’ faith, quickly paving\r\nfor itself through tolls. It was far more economical than any other\r\nform of transportation at the time. It permitted trade between the\r\nGreat Lake region and East Coast, robbing the Mississippi River of\r\nmuch of its traffic. It allowed New York to supplant Boston,\r\n(30) Philadelphia, and other Eastern cities as the chief center of both\r\ndomestic and foreign commerce. Cities sprang up along the canal.\r\nIt also contributed in a number of ways to the North's victory over\r\nthe South in the Civil War.\r\n     An expansion of the canal was planned in 1849. Increased traffic\r\n(35) would undoubtedly have warranted its construction had it not been\r\nfor the development of the railroads.",
    "ans_a": "Jobs",
    "ans_b": "Grants",
    "ans_c": "Links",
    "ans_d": "Fees",
    "answer": "D"
  },
  {
    "number": "109",
    "type": "reading",
    "question": "Which of the following is NOT given in the fourth paragraph as an effect of the building of the Erie Canal?",
    "text": "<b>Questions 101-111</b>\r\n\r\n     It is said that George Washington was one of the first to realize\r\nhow important the building of canals would be to the nation’s\r\ndevelopment. In fact, before he became President, he headed the\r\nfirst company in the United States to build a canal which was to\r\n(5) connect the Ohio and Potomac rivers. It was never completed, but it\r\nshowed the nation the feasibility of canals. As the country\r\nexpanded westward, settlers In western New York, Pennsylvania, anid\r\nOhio needed a means to ship goods. Canals linking natural waterways\r\nseemed to offer an effective solution.\r\n(10)   In 1791 engincers commissioned by the state of New York\r\ninvestigated the possibility of a canal between Albany on the\r\nHudson River and Buffalo on Lake Eric, which would link the Great\r\nLakes area with the Atlantic seacoast. It would avoid the\r\nmountains that served as a barrier to canals from the Delaware\r\n(15) and Potomac rivers.\r\nThe first attempt to dig the canal, to be called the Erie Canal,\r\nwis made by private companies, but only a comparatively small\r\nportion was built before the project was halted for lack of funds.\r\n     The cost of the project was an estimated five million dollars, an\r\n(20) enormous amount for those days. There was some On-again-olf-again\r\nFederal funding, but the War of 1812 put an end to this. In 1817\r\nDeWitt Clinton was elected Governor of New York and persuaded the\r\nstate bo finance and build the canal. It was completed in 1825,\r\ncosting two million dollars more than expected.\r\n(25)    The canal rapidly lived up to its sponsors’ faith, quickly paving\r\nfor itself through tolls. It was far more economical than any other\r\nform of transportation at the time. It permitted trade between the\r\nGreat Lake region and East Coast, robbing the Mississippi River of\r\nmuch of its traffic. It allowed New York to supplant Boston,\r\n(30) Philadelphia, and other Eastern cities as the chief center of both\r\ndomestic and foreign commerce. Cities sprang up along the canal.\r\nIt also contributed in a number of ways to the North's victory over\r\nthe South in the Civil War.\r\n     An expansion of the canal was planned in 1849. Increased traffic\r\n(35) would undoubtedly have warranted its construction had it not been\r\nfor the development of the railroads.",
    "ans_a": "It allowed the East Coast to trade with the Great Lakes area.",
    "ans_b": "It took water traffic away from the Mississippi River.",
    "ans_c": "It helped determine the outcome of the Civil War.",
    "ans_d": "It established Boston and Philadelphia as the most important centers of trade.",
    "answer": "D"
  },
  {
    "number": "110",
    "type": "reading",
    "question": "What can be inferred about railroads in 1849 from the information in the last paragraph?",
    "text": "<b>Questions 101-111</b>\r\n\r\n     It is said that George Washington was one of the first to realize\r\nhow important the building of canals would be to the nation’s\r\ndevelopment. In fact, before he became President, he headed the\r\nfirst company in the United States to build a canal which was to\r\n(5) connect the Ohio and Potomac rivers. It was never completed, but it\r\nshowed the nation the feasibility of canals. As the country\r\nexpanded westward, settlers In western New York, Pennsylvania, anid\r\nOhio needed a means to ship goods. Canals linking natural waterways\r\nseemed to offer an effective solution.\r\n(10)   In 1791 engincers commissioned by the state of New York\r\ninvestigated the possibility of a canal between Albany on the\r\nHudson River and Buffalo on Lake Eric, which would link the Great\r\nLakes area with the Atlantic seacoast. It would avoid the\r\nmountains that served as a barrier to canals from the Delaware\r\n(15) and Potomac rivers.\r\nThe first attempt to dig the canal, to be called the Erie Canal,\r\nwis made by private companies, but only a comparatively small\r\nportion was built before the project was halted for lack of funds.\r\n     The cost of the project was an estimated five million dollars, an\r\n(20) enormous amount for those days. There was some On-again-olf-again\r\nFederal funding, but the War of 1812 put an end to this. In 1817\r\nDeWitt Clinton was elected Governor of New York and persuaded the\r\nstate bo finance and build the canal. It was completed in 1825,\r\ncosting two million dollars more than expected.\r\n(25)    The canal rapidly lived up to its sponsors’ faith, quickly paving\r\nfor itself through tolls. It was far more economical than any other\r\nform of transportation at the time. It permitted trade between the\r\nGreat Lake region and East Coast, robbing the Mississippi River of\r\nmuch of its traffic. It allowed New York to supplant Boston,\r\n(30) Philadelphia, and other Eastern cities as the chief center of both\r\ndomestic and foreign commerce. Cities sprang up along the canal.\r\nIt also contributed in a number of ways to the North's victory over\r\nthe South in the Civil War.\r\n     An expansion of the canal was planned in 1849. Increased traffic\r\n(35) would undoubtedly have warranted its construction had it not been\r\nfor the development of the railroads.",
    "ans_a": "They were being planned but had not yet been built.",
    "ans_b": "They were seriously underdeveloped.",
    "ans_c": "They had begun to compete with the Erie Canal for traffic.",
    "ans_d": "They were weakened by the expansion of the canal.",
    "answer": "C"
  },
  {
    "number": "111",
    "type": "reading",
    "question": "The word “warranted” in line 35 is closest in meaning to",
    "text": "<b>Questions 101-111</b>\r\n\r\n     It is said that George Washington was one of the first to realize\r\nhow important the building of canals would be to the nation’s\r\ndevelopment. In fact, before he became President, he headed the\r\nfirst company in the United States to build a canal which was to\r\n(5) connect the Ohio and Potomac rivers. It was never completed, but it\r\nshowed the nation the feasibility of canals. As the country\r\nexpanded westward, settlers In western New York, Pennsylvania, anid\r\nOhio needed a means to ship goods. Canals linking natural waterways\r\nseemed to offer an effective solution.\r\n(10)   In 1791 engincers commissioned by the state of New York\r\ninvestigated the possibility of a canal between Albany on the\r\nHudson River and Buffalo on Lake Eric, which would link the Great\r\nLakes area with the Atlantic seacoast. It would avoid the\r\nmountains that served as a barrier to canals from the Delaware\r\n(15) and Potomac rivers.\r\nThe first attempt to dig the canal, to be called the Erie Canal,\r\nwis made by private companies, but only a comparatively small\r\nportion was built before the project was halted for lack of funds.\r\n     The cost of the project was an estimated five million dollars, an\r\n(20) enormous amount for those days. There was some On-again-olf-again\r\nFederal funding, but the War of 1812 put an end to this. In 1817\r\nDeWitt Clinton was elected Governor of New York and persuaded the\r\nstate bo finance and build the canal. It was completed in 1825,\r\ncosting two million dollars more than expected.\r\n(25)    The canal rapidly lived up to its sponsors’ faith, quickly paving\r\nfor itself through tolls. It was far more economical than any other\r\nform of transportation at the time. It permitted trade between the\r\nGreat Lake region and East Coast, robbing the Mississippi River of\r\nmuch of its traffic. It allowed New York to supplant Boston,\r\n(30) Philadelphia, and other Eastern cities as the chief center of both\r\ndomestic and foreign commerce. Cities sprang up along the canal.\r\nIt also contributed in a number of ways to the North's victory over\r\nthe South in the Civil War.\r\n     An expansion of the canal was planned in 1849. Increased traffic\r\n(35) would undoubtedly have warranted its construction had it not been\r\nfor the development of the railroads.",
    "ans_a": "guaranteed",
    "ans_b": "justified",
    "ans_c": "hastened",
    "ans_d": "prevented",
    "answer": "B"
  },
  {
    "number": "112",
    "type": "reading",
    "question": "This passage is mainly about",
    "text": "<b>Questions 112-121</b>\r\n\r\n     Carbon dating can be used to estimate the age of any organic natural material; it has been used\r\nsuccessfully in archaeology to determine the age of ancient artifacts or fossils as well as in a variety of\r\nother fields, the principle underlying the use of carbon dating is that carbon is a part of all living\r\nthings on Earth. Since a radioactive substance such as carbon-14 has a known half-life, the amount of\r\n(5) carbon-14 remaining in an object can be used to date that object.\r\n     Carbon-14 has a half-life of 5,570 years, which means that after that number of years half of the\r\ncarbon-14 atoms have decayed into nitrogen-14. It is the ratio of carbon-14 to nitrogen-14 in that\r\nsubstance that indicates the age of the substance. If, for example, in a particular sample the amount\r\nof carbon-14 is roughly equivalent to the amount of nitrogen-14, this indicates that around half of the\r\n(10) carbon-14 has decayed into nitrogen-14, and the sample is approximately 5,570 years old. \r\n     Carbon dating cannot be used effectively in dating objects that are older than 80,000 years.\r\nWhen objects are that old, much of the carbon-14 has already decayed into nitrogen-14, and the\r\nminuscule amount that is left does not provide a reliable measurement of age. In the case of older\r\nobjects, other age-dating methods are available, methods which use radioactive atoms with longer \r\n(15) half-lives than carbon has.",
    "ans_a": "the differences between carbon-14 and nitrogen-14",
    "ans_b": "one method of dating old objects ",
    "ans_c": "archaeology and the study of ancient artifacts",
    "ans_d": "various uses for carbon",
    "answer": "B"
  },
  {
    "number": "113",
    "type": "reading",
    "question": "The word \"estimate\" in line 1 is closest in meaning",
    "text": "<b>Questions 112-121</b>\r\n\r\n     Carbon dating can be used to estimate the age of any organic natural material; it has been used\r\nsuccessfully in archaeology to determine the age of ancient artifacts or fossils as well as in a variety of\r\nother fields, the principle underlying the use of carbon dating is that carbon is a part of all living\r\nthings on Earth. Since a radioactive substance such as carbon-14 has a known half-life, the amount of\r\n(5) carbon-14 remaining in an object can be used to date that object.\r\n     Carbon-14 has a half-life of 5,570 years, which means that after that number of years half of the\r\ncarbon-14 atoms have decayed into nitrogen-14. It is the ratio of carbon-14 to nitrogen-14 in that\r\nsubstance that indicates the age of the substance. If, for example, in a particular sample the amount\r\nof carbon-14 is roughly equivalent to the amount of nitrogen-14, this indicates that around half of the\r\n(10) carbon-14 has decayed into nitrogen-14, and the sample is approximately 5,570 years old. \r\n     Carbon dating cannot be used effectively in dating objects that are older than 80,000 years.\r\nWhen objects are that old, much of the carbon-14 has already decayed into nitrogen-14, and the\r\nminuscule amount that is left does not provide a reliable measurement of age. In the case of older\r\nobjects, other age-dating methods are available, methods which use radioactive atoms with longer \r\n(15) half-lives than carbon has.",
    "ans_a": "understand",
    "ans_b": "hide",
    "ans_c": "rate",
    "ans_d": "approximate",
    "answer": "D"
  },
  {
    "number": "114",
    "type": "reading",
    "question": "The pronoun \"it\" in line 1 refers to",
    "text": "<b>Questions 112-121</b>\r\n\r\n     Carbon dating can be used to estimate the age of any organic natural material; it has been used\r\nsuccessfully in archaeology to determine the age of ancient artifacts or fossils as well as in a variety of\r\nother fields, the principle underlying the use of carbon dating is that carbon is a part of all living\r\nthings on Earth. Since a radioactive substance such as carbon-14 has a known half-life, the amount of\r\n(5) carbon-14 remaining in an object can be used to date that object.\r\n     Carbon-14 has a half-life of 5,570 years, which means that after that number of years half of the\r\ncarbon-14 atoms have decayed into nitrogen-14. It is the ratio of carbon-14 to nitrogen-14 in that\r\nsubstance that indicates the age of the substance. If, for example, in a particular sample the amount\r\nof carbon-14 is roughly equivalent to the amount of nitrogen-14, this indicates that around half of the\r\n(10) carbon-14 has decayed into nitrogen-14, and the sample is approximately 5,570 years old. \r\n     Carbon dating cannot be used effectively in dating objects that are older than 80,000 years.\r\nWhen objects are that old, much of the carbon-14 has already decayed into nitrogen-14, and the\r\nminuscule amount that is left does not provide a reliable measurement of age. In the case of older\r\nobjects, other age-dating methods are available, methods which use radioactive atoms with longer \r\n(15) half-lives than carbon has.",
    "ans_a": "carbon dating",
    "ans_b": "the age",
    "ans_c": "any organic natural material",
    "ans_d": "archeology",
    "answer": "A"
  },
  {
    "number": "115",
    "type": "reading",
    "question": "Which of the following is NOT true about carbon-14?",
    "text": "<b>Questions 112-121</b>\r\n\r\n     Carbon dating can be used to estimate the age of any organic natural material; it has been used\r\nsuccessfully in archaeology to determine the age of ancient artifacts or fossils as well as in a variety of\r\nother fields, the principle underlying the use of carbon dating is that carbon is a part of all living\r\nthings on Earth. Since a radioactive substance such as carbon-14 has a known half-life, the amount of\r\n(5) carbon-14 remaining in an object can be used to date that object.\r\n     Carbon-14 has a half-life of 5,570 years, which means that after that number of years half of the\r\ncarbon-14 atoms have decayed into nitrogen-14. It is the ratio of carbon-14 to nitrogen-14 in that\r\nsubstance that indicates the age of the substance. If, for example, in a particular sample the amount\r\nof carbon-14 is roughly equivalent to the amount of nitrogen-14, this indicates that around half of the\r\n(10) carbon-14 has decayed into nitrogen-14, and the sample is approximately 5,570 years old. \r\n     Carbon dating cannot be used effectively in dating objects that are older than 80,000 years.\r\nWhen objects are that old, much of the carbon-14 has already decayed into nitrogen-14, and the\r\nminuscule amount that is left does not provide a reliable measurement of age. In the case of older\r\nobjects, other age-dating methods are available, methods which use radioactive atoms with longer \r\n(15) half-lives than carbon has.",
    "ans_a": "It is radioactive.",
    "ans_b": "Its half-life is more than 5,000 years. ",
    "ans_c": "It and nitrogen always exist in equal amounts in any substance. ",
    "ans_d": "It can decay into nitrogen-14.",
    "answer": "C"
  },
  {
    "number": "116",
    "type": "reading",
    "question": "The word \"underlying\" in line 3 could best be replaced by",
    "text": "<b>Questions 112-121</b>\r\n\r\n     Carbon dating can be used to estimate the age of any organic natural material; it has been used\r\nsuccessfully in archaeology to determine the age of ancient artifacts or fossils as well as in a variety of\r\nother fields, the principle underlying the use of carbon dating is that carbon is a part of all living\r\nthings on Earth. Since a radioactive substance such as carbon-14 has a known half-life, the amount of\r\n(5) carbon-14 remaining in an object can be used to date that object.\r\n     Carbon-14 has a half-life of 5,570 years, which means that after that number of years half of the\r\ncarbon-14 atoms have decayed into nitrogen-14. It is the ratio of carbon-14 to nitrogen-14 in that\r\nsubstance that indicates the age of the substance. If, for example, in a particular sample the amount\r\nof carbon-14 is roughly equivalent to the amount of nitrogen-14, this indicates that around half of the\r\n(10) carbon-14 has decayed into nitrogen-14, and the sample is approximately 5,570 years old. \r\n     Carbon dating cannot be used effectively in dating objects that are older than 80,000 years.\r\nWhen objects are that old, much of the carbon-14 has already decayed into nitrogen-14, and the\r\nminuscule amount that is left does not provide a reliable measurement of age. In the case of older\r\nobjects, other age-dating methods are available, methods which use radioactive atoms with longer \r\n(15) half-lives than carbon has.",
    "ans_a": "below",
    "ans_b": "requiring",
    "ans_c": "being studied through ",
    "ans_d": "serving as a basis for",
    "answer": "D"
  },
  {
    "number": "117",
    "type": "reading",
    "question": "It can be inferred from the passage that if an item contains more carbon-14 than nitrogen-14, then the item is",
    "text": "<b>Questions 112-121</b>\r\n\r\n     Carbon dating can be used to estimate the age of any organic natural material; it has been used\r\nsuccessfully in archaeology to determine the age of ancient artifacts or fossils as well as in a variety of\r\nother fields, the principle underlying the use of carbon dating is that carbon is a part of all living\r\nthings on Earth. Since a radioactive substance such as carbon-14 has a known half-life, the amount of\r\n(5) carbon-14 remaining in an object can be used to date that object.\r\n     Carbon-14 has a half-life of 5,570 years, which means that after that number of years half of the\r\ncarbon-14 atoms have decayed into nitrogen-14. It is the ratio of carbon-14 to nitrogen-14 in that\r\nsubstance that indicates the age of the substance. If, for example, in a particular sample the amount\r\nof carbon-14 is roughly equivalent to the amount of nitrogen-14, this indicates that around half of the\r\n(10) carbon-14 has decayed into nitrogen-14, and the sample is approximately 5,570 years old. \r\n     Carbon dating cannot be used effectively in dating objects that are older than 80,000 years.\r\nWhen objects are that old, much of the carbon-14 has already decayed into nitrogen-14, and the\r\nminuscule amount that is left does not provide a reliable measurement of age. In the case of older\r\nobjects, other age-dating methods are available, methods which use radioactive atoms with longer \r\n(15) half-lives than carbon has.",
    "ans_a": "too old to be age-dated with carbon-14 ",
    "ans_b": "not as much as 5,570 years old",
    "ans_c": "too radioactive to be used by archeologists",
    "ans_d": "more than 5,570 years old",
    "answer": "B"
  },
  {
    "number": "118",
    "type": "reading",
    "question": "The word \"roughly\" in line 9 could best be replaced by",
    "text": "<b>Questions 112-121</b>\r\n\r\n     Carbon dating can be used to estimate the age of any organic natural material; it has been used\r\nsuccessfully in archaeology to determine the age of ancient artifacts or fossils as well as in a variety of\r\nother fields, the principle underlying the use of carbon dating is that carbon is a part of all living\r\nthings on Earth. Since a radioactive substance such as carbon-14 has a known half-life, the amount of\r\n(5) carbon-14 remaining in an object can be used to date that object.\r\n     Carbon-14 has a half-life of 5,570 years, which means that after that number of years half of the\r\ncarbon-14 atoms have decayed into nitrogen-14. It is the ratio of carbon-14 to nitrogen-14 in that\r\nsubstance that indicates the age of the substance. If, for example, in a particular sample the amount\r\nof carbon-14 is roughly equivalent to the amount of nitrogen-14, this indicates that around half of the\r\n(10) carbon-14 has decayed into nitrogen-14, and the sample is approximately 5,570 years old. \r\n     Carbon dating cannot be used effectively in dating objects that are older than 80,000 years.\r\nWhen objects are that old, much of the carbon-14 has already decayed into nitrogen-14, and the\r\nminuscule amount that is left does not provide a reliable measurement of age. In the case of older\r\nobjects, other age-dating methods are available, methods which use radioactive atoms with longer \r\n(15) half-lives than carbon has.",
    "ans_a": "harshly",
    "ans_b": "precisely",
    "ans_c": "coarsely",
    "ans_d": "approximately",
    "answer": "D"
  },
  {
    "number": "119",
    "type": "reading",
    "question": "The expression \"is left\" in line 13 could best be replaced by",
    "text": "<b>Questions 112-121</b>\r\n\r\n     Carbon dating can be used to estimate the age of any organic natural material; it has been used\r\nsuccessfully in archaeology to determine the age of ancient artifacts or fossils as well as in a variety of\r\nother fields, the principle underlying the use of carbon dating is that carbon is a part of all living\r\nthings on Earth. Since a radioactive substance such as carbon-14 has a known half-life, the amount of\r\n(5) carbon-14 remaining in an object can be used to date that object.\r\n     Carbon-14 has a half-life of 5,570 years, which means that after that number of years half of the\r\ncarbon-14 atoms have decayed into nitrogen-14. It is the ratio of carbon-14 to nitrogen-14 in that\r\nsubstance that indicates the age of the substance. If, for example, in a particular sample the amount\r\nof carbon-14 is roughly equivalent to the amount of nitrogen-14, this indicates that around half of the\r\n(10) carbon-14 has decayed into nitrogen-14, and the sample is approximately 5,570 years old. \r\n     Carbon dating cannot be used effectively in dating objects that are older than 80,000 years.\r\nWhen objects are that old, much of the carbon-14 has already decayed into nitrogen-14, and the\r\nminuscule amount that is left does not provide a reliable measurement of age. In the case of older\r\nobjects, other age-dating methods are available, methods which use radioactive atoms with longer \r\n(15) half-lives than carbon has.",
    "ans_a": "remains",
    "ans_b": "has turned",
    "ans_c": "changes",
    "ans_d": "is gone",
    "answer": "A"
  },
  {
    "number": "120",
    "type": "reading",
    "question": "It is implied in the passage that",
    "text": "<b>Questions 112-121</b>\r\n\r\n     Carbon dating can be used to estimate the age of any organic natural material; it has been used\r\nsuccessfully in archaeology to determine the age of ancient artifacts or fossils as well as in a variety of\r\nother fields, the principle underlying the use of carbon dating is that carbon is a part of all living\r\nthings on Earth. Since a radioactive substance such as carbon-14 has a known half-life, the amount of\r\n(5) carbon-14 remaining in an object can be used to date that object.\r\n     Carbon-14 has a half-life of 5,570 years, which means that after that number of years half of the\r\ncarbon-14 atoms have decayed into nitrogen-14. It is the ratio of carbon-14 to nitrogen-14 in that\r\nsubstance that indicates the age of the substance. If, for example, in a particular sample the amount\r\nof carbon-14 is roughly equivalent to the amount of nitrogen-14, this indicates that around half of the\r\n(10) carbon-14 has decayed into nitrogen-14, and the sample is approximately 5,570 years old. \r\n     Carbon dating cannot be used effectively in dating objects that are older than 80,000 years.\r\nWhen objects are that old, much of the carbon-14 has already decayed into nitrogen-14, and the\r\nminuscule amount that is left does not provide a reliable measurement of age. In the case of older\r\nobjects, other age-dating methods are available, methods which use radioactive atoms with longer \r\n(15) half-lives than carbon has.",
    "ans_a": "carbon dating could not be used on an item containing nitrogen ",
    "ans_b": "fossils cannot be age-dated using carbon-14",
    "ans_c": "carbon-14 does not have the longest known half-life",
    "ans_d": "carbon dating has no known uses outside of archeology",
    "answer": "C"
  },
  {
    "number": "121",
    "type": "reading",
    "question": "The paragraph following the passage most probably discusses",
    "text": "<b>Questions 112-121</b>\r\n\r\n     Carbon dating can be used to estimate the age of any organic natural material; it has been used\r\nsuccessfully in archaeology to determine the age of ancient artifacts or fossils as well as in a variety of\r\nother fields, the principle underlying the use of carbon dating is that carbon is a part of all living\r\nthings on Earth. Since a radioactive substance such as carbon-14 has a known half-life, the amount of\r\n(5) carbon-14 remaining in an object can be used to date that object.\r\n     Carbon-14 has a half-life of 5,570 years, which means that after that number of years half of the\r\ncarbon-14 atoms have decayed into nitrogen-14. It is the ratio of carbon-14 to nitrogen-14 in that\r\nsubstance that indicates the age of the substance. If, for example, in a particular sample the amount\r\nof carbon-14 is roughly equivalent to the amount of nitrogen-14, this indicates that around half of the\r\n(10) carbon-14 has decayed into nitrogen-14, and the sample is approximately 5,570 years old. \r\n     Carbon dating cannot be used effectively in dating objects that are older than 80,000 years.\r\nWhen objects are that old, much of the carbon-14 has already decayed into nitrogen-14, and the\r\nminuscule amount that is left does not provide a reliable measurement of age. In the case of older\r\nobjects, other age-dating methods are available, methods which use radioactive atoms with longer \r\n(15) half-lives than carbon has.",
    "ans_a": "how carbon-14 decays into nitrogen-1 ",
    "ans_b": "various other age-dating methods ",
    "ans_c": "why carbon-14 has such a long half-life ",
    "ans_d": "what substances are part of all living things",
    "answer": "B"
  },
  {
    "number": "122",
    "type": "reading",
    "question": "Which of the following is NOT true?",
    "text": "<b>Questions 122-131</b>\r\n\r\n     In 776 B.C., the first Olympic Games were held at the foot \r\nof Mount Olympus to honor the Greeks ' chief god, Zeus. \r\nThe warm climate for outdoor activities, the need for \r\npreparedness in war, and their lifestyle caused the Greeks \r\n(5) to create competitive sports. Only the elite and military \r\ncould participate at first, but later the games were open to \r\nall free Greek males who had no criminal record. The \r\nGreeks emphasized physical fitness and strength in their \r\neducation of youth. Therefore, contests in running, jumping, \r\n(10) discus and javelin throwing, boxing, and horse and \r\nchariot racing were held in individual cities, and the winners \r\ncompeted every four years at Mount Olympus. Winners \r\nwere greatly honored by having olive wreaths placed on \r\ntheir heads and having poems sung about their deeds. \r\n(15) Originally these contests were held as games of friendship, \r\nand any wars in progress were halted to allow the games to \r\ntake place. They also helped to strengthen bonds among \r\ncompetitors and the different cities represented. \r\n     The Greeks attached so much importance to the games \r\n(20) that they calculated time in four-year cycles called \"Olympicads,\" \r\ndating from 776 B.C. The contests coincided with \r\nreligious festivities and constituted an all-out effort on the \r\npart of the participants to please the gods. Any who \r\ndisobeyed the rules were dismissed and seriously punished. \r\n(25) These athletes brought shame not only to themselves, but \r\nalso to the cities they represented.",
    "ans_a": "Winners placed olive wreaths on their own heads.",
    "ans_b": "The games were held in Greece every four years.",
    "ans_c": "Battles were interrupted to participate in the games.",
    "ans_d": "Poems glorified the winners in song.",
    "answer": "A"
  },
  {
    "number": "123",
    "type": "reading",
    "question": "The word “elite” in line 5 is closest in meaning to",
    "text": "<b>Questions 122-131</b>\r\n\r\n     In 776 B.C., the first Olympic Games were held at the foot \r\nof Mount Olympus to honor the Greeks ' chief god, Zeus. \r\nThe warm climate for outdoor activities, the need for \r\npreparedness in war, and their lifestyle caused the Greeks \r\n(5) to create competitive sports. Only the elite and military \r\ncould participate at first, but later the games were open to \r\nall free Greek males who had no criminal record. The \r\nGreeks emphasized physical fitness and strength in their \r\neducation of youth. Therefore, contests in running, jumping, \r\n(10) discus and javelin throwing, boxing, and horse and \r\nchariot racing were held in individual cities, and the winners \r\ncompeted every four years at Mount Olympus. Winners \r\nwere greatly honored by having olive wreaths placed on \r\ntheir heads and having poems sung about their deeds. \r\n(15) Originally these contests were held as games of friendship, \r\nand any wars in progress were halted to allow the games to \r\ntake place. They also helped to strengthen bonds among \r\ncompetitors and the different cities represented. \r\n     The Greeks attached so much importance to the games \r\n(20) that they calculated time in four-year cycles called \"Olympicads,\" \r\ndating from 776 B.C. The contests coincided with \r\nreligious festivities and constituted an all-out effort on the \r\npart of the participants to please the gods. Any who \r\ndisobeyed the rules were dismissed and seriously punished. \r\n(25) These athletes brought shame not only to themselves, but \r\nalso to the cities they represented.",
    "ans_a": "aristocracy",
    "ans_b": "brave",
    "ans_c": "intellectuals",
    "ans_d": "muscular",
    "answer": "A"
  },
  {
    "number": "124",
    "type": "reading",
    "question": "Why were the Olympic games held?",
    "text": "<b>Questions 122-131</b>\r\n\r\n     In 776 B.C., the first Olympic Games were held at the foot \r\nof Mount Olympus to honor the Greeks ' chief god, Zeus. \r\nThe warm climate for outdoor activities, the need for \r\npreparedness in war, and their lifestyle caused the Greeks \r\n(5) to create competitive sports. Only the elite and military \r\ncould participate at first, but later the games were open to \r\nall free Greek males who had no criminal record. The \r\nGreeks emphasized physical fitness and strength in their \r\neducation of youth. Therefore, contests in running, jumping, \r\n(10) discus and javelin throwing, boxing, and horse and \r\nchariot racing were held in individual cities, and the winners \r\ncompeted every four years at Mount Olympus. Winners \r\nwere greatly honored by having olive wreaths placed on \r\ntheir heads and having poems sung about their deeds. \r\n(15) Originally these contests were held as games of friendship, \r\nand any wars in progress were halted to allow the games to \r\ntake place. They also helped to strengthen bonds among \r\ncompetitors and the different cities represented. \r\n     The Greeks attached so much importance to the games \r\n(20) that they calculated time in four-year cycles called \"Olympicads,\" \r\ndating from 776 B.C. The contests coincided with \r\nreligious festivities and constituted an all-out effort on the \r\npart of the participants to please the gods. Any who \r\ndisobeyed the rules were dismissed and seriously punished. \r\n(25) These athletes brought shame not only to themselves, but \r\nalso to the cities they represented.",
    "ans_a": "To stop wars",
    "ans_b": "To honor Zeus",
    "ans_c": "To crown the best athletes",
    "ans_d": "To sing songs about the athletes",
    "answer": "B"
  },
  {
    "number": "125",
    "type": "reading",
    "question": "Approximately how many years ago did these games originated?",
    "text": "<b>Questions 122-131</b>\r\n\r\n     In 776 B.C., the first Olympic Games were held at the foot \r\nof Mount Olympus to honor the Greeks ' chief god, Zeus. \r\nThe warm climate for outdoor activities, the need for \r\npreparedness in war, and their lifestyle caused the Greeks \r\n(5) to create competitive sports. Only the elite and military \r\ncould participate at first, but later the games were open to \r\nall free Greek males who had no criminal record. The \r\nGreeks emphasized physical fitness and strength in their \r\neducation of youth. Therefore, contests in running, jumping, \r\n(10) discus and javelin throwing, boxing, and horse and \r\nchariot racing were held in individual cities, and the winners \r\ncompeted every four years at Mount Olympus. Winners \r\nwere greatly honored by having olive wreaths placed on \r\ntheir heads and having poems sung about their deeds. \r\n(15) Originally these contests were held as games of friendship, \r\nand any wars in progress were halted to allow the games to \r\ntake place. They also helped to strengthen bonds among \r\ncompetitors and the different cities represented. \r\n     The Greeks attached so much importance to the games \r\n(20) that they calculated time in four-year cycles called \"Olympicads,\" \r\ndating from 776 B.C. The contests coincided with \r\nreligious festivities and constituted an all-out effort on the \r\npart of the participants to please the gods. Any who \r\ndisobeyed the rules were dismissed and seriously punished. \r\n(25) These athletes brought shame not only to themselves, but \r\nalso to the cities they represented.",
    "ans_a": "800 years",
    "ans_b": "1,200 years",
    "ans_c": "2,300 years",
    "ans_d": "2,800 years",
    "answer": "D"
  },
  {
    "number": "126",
    "type": "reading",
    "question": "What conclusion can we draw about ancient Greeks?",
    "text": "<b>Questions 122-131</b>\r\n\r\n     In 776 B.C., the first Olympic Games were held at the foot \r\nof Mount Olympus to honor the Greeks ' chief god, Zeus. \r\nThe warm climate for outdoor activities, the need for \r\npreparedness in war, and their lifestyle caused the Greeks \r\n(5) to create competitive sports. Only the elite and military \r\ncould participate at first, but later the games were open to \r\nall free Greek males who had no criminal record. The \r\nGreeks emphasized physical fitness and strength in their \r\neducation of youth. Therefore, contests in running, jumping, \r\n(10) discus and javelin throwing, boxing, and horse and \r\nchariot racing were held in individual cities, and the winners \r\ncompeted every four years at Mount Olympus. Winners \r\nwere greatly honored by having olive wreaths placed on \r\ntheir heads and having poems sung about their deeds. \r\n(15) Originally these contests were held as games of friendship, \r\nand any wars in progress were halted to allow the games to \r\ntake place. They also helped to strengthen bonds among \r\ncompetitors and the different cities represented. \r\n     The Greeks attached so much importance to the games \r\n(20) that they calculated time in four-year cycles called \"Olympicads,\" \r\ndating from 776 B.C. The contests coincided with \r\nreligious festivities and constituted an all-out effort on the \r\npart of the participants to please the gods. Any who \r\ndisobeyed the rules were dismissed and seriously punished. \r\n(25) These athletes brought shame not only to themselves, but \r\nalso to the cities they represented.",
    "ans_a": "They were pacifists.",
    "ans_b": "They believe athletic events were important.",
    "ans_c": "They were very simple.",
    "ans_d": "They couldn’t count, so they used “Olympiads” for dates.",
    "answer": "B"
  },
  {
    "number": "127",
    "type": "reading",
    "question": "What is the main idea of this passage?",
    "text": "<b>Questions 122-131</b>\r\n\r\n     In 776 B.C., the first Olympic Games were held at the foot \r\nof Mount Olympus to honor the Greeks ' chief god, Zeus. \r\nThe warm climate for outdoor activities, the need for \r\npreparedness in war, and their lifestyle caused the Greeks \r\n(5) to create competitive sports. Only the elite and military \r\ncould participate at first, but later the games were open to \r\nall free Greek males who had no criminal record. The \r\nGreeks emphasized physical fitness and strength in their \r\neducation of youth. Therefore, contests in running, jumping, \r\n(10) discus and javelin throwing, boxing, and horse and \r\nchariot racing were held in individual cities, and the winners \r\ncompeted every four years at Mount Olympus. Winners \r\nwere greatly honored by having olive wreaths placed on \r\ntheir heads and having poems sung about their deeds. \r\n(15) Originally these contests were held as games of friendship, \r\nand any wars in progress were halted to allow the games to \r\ntake place. They also helped to strengthen bonds among \r\ncompetitors and the different cities represented. \r\n     The Greeks attached so much importance to the games \r\n(20) that they calculated time in four-year cycles called \"Olympicads,\" \r\ndating from 776 B.C. The contests coincided with \r\nreligious festivities and constituted an all-out effort on the \r\npart of the participants to please the gods. Any who \r\ndisobeyed the rules were dismissed and seriously punished. \r\n(25) These athletes brought shame not only to themselves, but \r\nalso to the cities they represented.",
    "ans_a": "Physical fitness was an integral part of the lives of the ancient Greeks.",
    "ans_b": "The Greeks severely punished those who didn’t participate in physical fitness programs.",
    "ans_c": "The Greeks had always encouraged everyone to participate in the games.",
    "ans_d": "The Greeks had the games coincide with religious festi……. so that they could go back to war when the games were over.",
    "answer": "A"
  },
  {
    "number": "128",
    "type": "reading",
    "question": "In line 14, the word “deeds” is closest in meaning to",
    "text": "<b>Questions 122-131</b>\r\n\r\n     In 776 B.C., the first Olympic Games were held at the foot \r\nof Mount Olympus to honor the Greeks ' chief god, Zeus. \r\nThe warm climate for outdoor activities, the need for \r\npreparedness in war, and their lifestyle caused the Greeks \r\n(5) to create competitive sports. Only the elite and military \r\ncould participate at first, but later the games were open to \r\nall free Greek males who had no criminal record. The \r\nGreeks emphasized physical fitness and strength in their \r\neducation of youth. Therefore, contests in running, jumping, \r\n(10) discus and javelin throwing, boxing, and horse and \r\nchariot racing were held in individual cities, and the winners \r\ncompeted every four years at Mount Olympus. Winners \r\nwere greatly honored by having olive wreaths placed on \r\ntheir heads and having poems sung about their deeds. \r\n(15) Originally these contests were held as games of friendship, \r\nand any wars in progress were halted to allow the games to \r\ntake place. They also helped to strengthen bonds among \r\ncompetitors and the different cities represented. \r\n     The Greeks attached so much importance to the games \r\n(20) that they calculated time in four-year cycles called \"Olympicads,\" \r\ndating from 776 B.C. The contests coincided with \r\nreligious festivities and constituted an all-out effort on the \r\npart of the participants to please the gods. Any who \r\ndisobeyed the rules were dismissed and seriously punished. \r\n(25) These athletes brought shame not only to themselves, but \r\nalso to the cities they represented.",
    "ans_a": "accomplishments",
    "ans_b": "ancestors",
    "ans_c": "documents",
    "ans_d": "property",
    "answer": "A"
  },
  {
    "number": "129",
    "type": "reading",
    "question": "Which of the following was ultimately required of all athlete competing in the Olympics? ",
    "text": "<b>Questions 122-131</b>\r\n\r\n     In 776 B.C., the first Olympic Games were held at the foot \r\nof Mount Olympus to honor the Greeks ' chief god, Zeus. \r\nThe warm climate for outdoor activities, the need for \r\npreparedness in war, and their lifestyle caused the Greeks \r\n(5) to create competitive sports. Only the elite and military \r\ncould participate at first, but later the games were open to \r\nall free Greek males who had no criminal record. The \r\nGreeks emphasized physical fitness and strength in their \r\neducation of youth. Therefore, contests in running, jumping, \r\n(10) discus and javelin throwing, boxing, and horse and \r\nchariot racing were held in individual cities, and the winners \r\ncompeted every four years at Mount Olympus. Winners \r\nwere greatly honored by having olive wreaths placed on \r\ntheir heads and having poems sung about their deeds. \r\n(15) Originally these contests were held as games of friendship, \r\nand any wars in progress were halted to allow the games to \r\ntake place. They also helped to strengthen bonds among \r\ncompetitors and the different cities represented. \r\n     The Greeks attached so much importance to the games \r\n(20) that they calculated time in four-year cycles called \"Olympicads,\" \r\ndating from 776 B.C. The contests coincided with \r\nreligious festivities and constituted an all-out effort on the \r\npart of the participants to please the gods. Any who \r\ndisobeyed the rules were dismissed and seriously punished. \r\n(25) These athletes brought shame not only to themselves, but \r\nalso to the cities they represented.",
    "ans_a": "They mush have completed military service.",
    "ans_b": "They had to attend special training sessions. ",
    "ans_c": "They had to be Greek males with no criminal record.",
    "ans_d": "They had to be very religious.",
    "answer": "C"
  },
  {
    "number": "130",
    "type": "reading",
    "question": "The word “halted” in line 16 means the most nearly the same as",
    "text": "<b>Questions 122-131</b>\r\n\r\n     In 776 B.C., the first Olympic Games were held at the foot \r\nof Mount Olympus to honor the Greeks ' chief god, Zeus. \r\nThe warm climate for outdoor activities, the need for \r\npreparedness in war, and their lifestyle caused the Greeks \r\n(5) to create competitive sports. Only the elite and military \r\ncould participate at first, but later the games were open to \r\nall free Greek males who had no criminal record. The \r\nGreeks emphasized physical fitness and strength in their \r\neducation of youth. Therefore, contests in running, jumping, \r\n(10) discus and javelin throwing, boxing, and horse and \r\nchariot racing were held in individual cities, and the winners \r\ncompeted every four years at Mount Olympus. Winners \r\nwere greatly honored by having olive wreaths placed on \r\ntheir heads and having poems sung about their deeds. \r\n(15) Originally these contests were held as games of friendship, \r\nand any wars in progress were halted to allow the games to \r\ntake place. They also helped to strengthen bonds among \r\ncompetitors and the different cities represented. \r\n     The Greeks attached so much importance to the games \r\n(20) that they calculated time in four-year cycles called \"Olympicads,\" \r\ndating from 776 B.C. The contests coincided with \r\nreligious festivities and constituted an all-out effort on the \r\npart of the participants to please the gods. Any who \r\ndisobeyed the rules were dismissed and seriously punished. \r\n(25) These athletes brought shame not only to themselves, but \r\nalso to the cities they represented.",
    "ans_a": "encouraged",
    "ans_b": "started",
    "ans_c": "curtailed",
    "ans_d": "fixed",
    "answer": "C"
  },
  {
    "number": "131",
    "type": "reading",
    "question": "What is an “Olympiad”?",
    "text": "<b>Questions 122-131</b>\r\n\r\n     In 776 B.C., the first Olympic Games were held at the foot \r\nof Mount Olympus to honor the Greeks ' chief god, Zeus. \r\nThe warm climate for outdoor activities, the need for \r\npreparedness in war, and their lifestyle caused the Greeks \r\n(5) to create competitive sports. Only the elite and military \r\ncould participate at first, but later the games were open to \r\nall free Greek males who had no criminal record. The \r\nGreeks emphasized physical fitness and strength in their \r\neducation of youth. Therefore, contests in running, jumping, \r\n(10) discus and javelin throwing, boxing, and horse and \r\nchariot racing were held in individual cities, and the winners \r\ncompeted every four years at Mount Olympus. Winners \r\nwere greatly honored by having olive wreaths placed on \r\ntheir heads and having poems sung about their deeds. \r\n(15) Originally these contests were held as games of friendship, \r\nand any wars in progress were halted to allow the games to \r\ntake place. They also helped to strengthen bonds among \r\ncompetitors and the different cities represented. \r\n     The Greeks attached so much importance to the games \r\n(20) that they calculated time in four-year cycles called \"Olympicads,\" \r\ndating from 776 B.C. The contests coincided with \r\nreligious festivities and constituted an all-out effort on the \r\npart of the participants to please the gods. Any who \r\ndisobeyed the rules were dismissed and seriously punished. \r\n(25) These athletes brought shame not only to themselves, but \r\nalso to the cities they represented.",
    "ans_a": "The time it took to finish the games",
    "ans_b": "The time between games",
    "ans_c": "The time it took to finish a war",
    "ans_d": "The time it took the athletes to train ",
    "answer": "B"
  },
  {
    "number": "132",
    "type": "reading",
    "question": "The purpose of this passage is to",
    "text": "<b>Questions 132-140</b>\r\n\r\n     Paul Bunyan is perhaps America's best-known folk hero. A fictional logger of incredible \r\nstrength, he was most likely based on an actual nineteenth-century logger from the northern United \r\nStates or Canada. As a folk hero. he struck a chord with Americans on some level, perhaps because he \r\nwas incredibly strong but also because he was hard-working and capable, ingenious in solving \r\n(5) problems, and fun-loving.\r\n     Though there is evidence that Paul Bunyan tales were part of oral tradition in the nineteenth \r\ncentury, Paul Bunyan stories did not appear in written form until the early twentieth century. \r\nJournalist James McGillivray included descriptions of Bunyan in a series of essays entitled \"The \r\nRound River Drive,\" which appeared in a number of Midwestern newspapers between 1906 and 1910. \r\n(10) However, it was through an extensive advertising campaign that Paul Bunyan moved solidly into \r\nprint.\r\n     Recognizing the appeal of Paul Bunyan as a figure for his company's advertising, William \r\nLaughead, an advertising executive for the Red River Lumber Company, initiated a campaign that \r\nconsisted of a series of publications featuring Paul Bunyan. For several decades, the company \r\n(15) distributed these publications free of charge and made no attempt to obtain a copyright on them. In \r\nfact, the company vigorously encouraged other writers to make use of Paul Bunyan because it felt \r\nthat the use of this character enhanced the name recognition of the Red River Lumber Company \r\ninasmuch as the name of the folk hero and the name of the company had become interwoven. \r\n     The Bunyan stories published by Red River and further circulated by others were tall tales of \r\n(20) gigantic proportions. In these tales, Bunyan is depicted as a man of superhuman proportions, who is \r\nstrong, hard-working, entrepreneurial, and innovative. In one story, for example, Paul is credited with \r\ndigging the Great Lakes in order to create a watering hole for his giant ox, Babe. In another of these \r\ntales, Paul caused an entire winter of blue snow to fall by swearing a blue streak after he injured \r\nhimself by smashing his thumb with a large hammer. A third story in the series describes Paul's role \r\n(25) in establishing the Mississippi River. \r\n     Fascination with Paul Bunyan has continued to grow, and today he is a standard of American \r\nfolklore. The prevalence of Bunyan as a figure of folklore today is evidenced by references to him in \r\ncountless stories, cartoons, poems, and songs as well as the numerous community festivals and \r\nlogging competitions featuring Paul Bunyan that can be found throughout the sections of the country \r\n(30) where logging has a strong tradition.",
    "ans_a": "present the actual feats of a real-life logger",
    "ans_b": "discuss a \"larger than life\" folk hero ",
    "ans_c": "describe logging in North America ",
    "ans_d": "provide an overview of American folktales",
    "answer": "B"
  },
  {
    "number": "133",
    "type": "reading",
    "question": "It is NOT stated in the passage that Paul Bunyan is known for his",
    "text": "<b>Questions 132-140</b>\r\n\r\n     Paul Bunyan is perhaps America's best-known folk hero. A fictional logger of incredible \r\nstrength, he was most likely based on an actual nineteenth-century logger from the northern United \r\nStates or Canada. As a folk hero. he struck a chord with Americans on some level, perhaps because he \r\nwas incredibly strong but also because he was hard-working and capable, ingenious in solving \r\n(5) problems, and fun-loving.\r\n     Though there is evidence that Paul Bunyan tales were part of oral tradition in the nineteenth \r\ncentury, Paul Bunyan stories did not appear in written form until the early twentieth century. \r\nJournalist James McGillivray included descriptions of Bunyan in a series of essays entitled \"The \r\nRound River Drive,\" which appeared in a number of Midwestern newspapers between 1906 and 1910. \r\n(10) However, it was through an extensive advertising campaign that Paul Bunyan moved solidly into \r\nprint.\r\n     Recognizing the appeal of Paul Bunyan as a figure for his company's advertising, William \r\nLaughead, an advertising executive for the Red River Lumber Company, initiated a campaign that \r\nconsisted of a series of publications featuring Paul Bunyan. For several decades, the company \r\n(15) distributed these publications free of charge and made no attempt to obtain a copyright on them. In \r\nfact, the company vigorously encouraged other writers to make use of Paul Bunyan because it felt \r\nthat the use of this character enhanced the name recognition of the Red River Lumber Company \r\ninasmuch as the name of the folk hero and the name of the company had become interwoven. \r\n     The Bunyan stories published by Red River and further circulated by others were tall tales of \r\n(20) gigantic proportions. In these tales, Bunyan is depicted as a man of superhuman proportions, who is \r\nstrong, hard-working, entrepreneurial, and innovative. In one story, for example, Paul is credited with \r\ndigging the Great Lakes in order to create a watering hole for his giant ox, Babe. In another of these \r\ntales, Paul caused an entire winter of blue snow to fall by swearing a blue streak after he injured \r\nhimself by smashing his thumb with a large hammer. A third story in the series describes Paul's role \r\n(25) in establishing the Mississippi River. \r\n     Fascination with Paul Bunyan has continued to grow, and today he is a standard of American \r\nfolklore. The prevalence of Bunyan as a figure of folklore today is evidenced by references to him in \r\ncountless stories, cartoons, poems, and songs as well as the numerous community festivals and \r\nlogging competitions featuring Paul Bunyan that can be found throughout the sections of the country \r\n(30) where logging has a strong tradition.",
    "ans_a": "unusual strength ",
    "ans_b": "dedication to work ",
    "ans_c": "ingenuity in difficult situations",
    "ans_d": "serious nature ",
    "answer": "D"
  },
  {
    "number": "134",
    "type": "reading",
    "question": "The passage states that Paul Bunyan tales first appeared",
    "text": "<b>Questions 132-140</b>\r\n\r\n     Paul Bunyan is perhaps America's best-known folk hero. A fictional logger of incredible \r\nstrength, he was most likely based on an actual nineteenth-century logger from the northern United \r\nStates or Canada. As a folk hero. he struck a chord with Americans on some level, perhaps because he \r\nwas incredibly strong but also because he was hard-working and capable, ingenious in solving \r\n(5) problems, and fun-loving.\r\n     Though there is evidence that Paul Bunyan tales were part of oral tradition in the nineteenth \r\ncentury, Paul Bunyan stories did not appear in written form until the early twentieth century. \r\nJournalist James McGillivray included descriptions of Bunyan in a series of essays entitled \"The \r\nRound River Drive,\" which appeared in a number of Midwestern newspapers between 1906 and 1910. \r\n(10) However, it was through an extensive advertising campaign that Paul Bunyan moved solidly into \r\nprint.\r\n     Recognizing the appeal of Paul Bunyan as a figure for his company's advertising, William \r\nLaughead, an advertising executive for the Red River Lumber Company, initiated a campaign that \r\nconsisted of a series of publications featuring Paul Bunyan. For several decades, the company \r\n(15) distributed these publications free of charge and made no attempt to obtain a copyright on them. In \r\nfact, the company vigorously encouraged other writers to make use of Paul Bunyan because it felt \r\nthat the use of this character enhanced the name recognition of the Red River Lumber Company \r\ninasmuch as the name of the folk hero and the name of the company had become interwoven. \r\n     The Bunyan stories published by Red River and further circulated by others were tall tales of \r\n(20) gigantic proportions. In these tales, Bunyan is depicted as a man of superhuman proportions, who is \r\nstrong, hard-working, entrepreneurial, and innovative. In one story, for example, Paul is credited with \r\ndigging the Great Lakes in order to create a watering hole for his giant ox, Babe. In another of these \r\ntales, Paul caused an entire winter of blue snow to fall by swearing a blue streak after he injured \r\nhimself by smashing his thumb with a large hammer. A third story in the series describes Paul's role \r\n(25) in establishing the Mississippi River. \r\n     Fascination with Paul Bunyan has continued to grow, and today he is a standard of American \r\nfolklore. The prevalence of Bunyan as a figure of folklore today is evidenced by references to him in \r\ncountless stories, cartoons, poems, and songs as well as the numerous community festivals and \r\nlogging competitions featuring Paul Bunyan that can be found throughout the sections of the country \r\n(30) where logging has a strong tradition.",
    "ans_a": "in oral stories",
    "ans_b": "in a series of essays",
    "ans_c": "in newspapers",
    "ans_d": "in advertising",
    "answer": "A"
  },
  {
    "number": "135",
    "type": "reading",
    "question": "Which of the following CANNOT be inferred about the Red River Lumber Company's advertising campaign featuring Paul Bunyan?",
    "text": "<b>Questions 132-140</b>\r\n\r\n     Paul Bunyan is perhaps America's best-known folk hero. A fictional logger of incredible \r\nstrength, he was most likely based on an actual nineteenth-century logger from the northern United \r\nStates or Canada. As a folk hero. he struck a chord with Americans on some level, perhaps because he \r\nwas incredibly strong but also because he was hard-working and capable, ingenious in solving \r\n(5) problems, and fun-loving.\r\n     Though there is evidence that Paul Bunyan tales were part of oral tradition in the nineteenth \r\ncentury, Paul Bunyan stories did not appear in written form until the early twentieth century. \r\nJournalist James McGillivray included descriptions of Bunyan in a series of essays entitled \"The \r\nRound River Drive,\" which appeared in a number of Midwestern newspapers between 1906 and 1910. \r\n(10) However, it was through an extensive advertising campaign that Paul Bunyan moved solidly into \r\nprint.\r\n     Recognizing the appeal of Paul Bunyan as a figure for his company's advertising, William \r\nLaughead, an advertising executive for the Red River Lumber Company, initiated a campaign that \r\nconsisted of a series of publications featuring Paul Bunyan. For several decades, the company \r\n(15) distributed these publications free of charge and made no attempt to obtain a copyright on them. In \r\nfact, the company vigorously encouraged other writers to make use of Paul Bunyan because it felt \r\nthat the use of this character enhanced the name recognition of the Red River Lumber Company \r\ninasmuch as the name of the folk hero and the name of the company had become interwoven. \r\n     The Bunyan stories published by Red River and further circulated by others were tall tales of \r\n(20) gigantic proportions. In these tales, Bunyan is depicted as a man of superhuman proportions, who is \r\nstrong, hard-working, entrepreneurial, and innovative. In one story, for example, Paul is credited with \r\ndigging the Great Lakes in order to create a watering hole for his giant ox, Babe. In another of these \r\ntales, Paul caused an entire winter of blue snow to fall by swearing a blue streak after he injured \r\nhimself by smashing his thumb with a large hammer. A third story in the series describes Paul's role \r\n(25) in establishing the Mississippi River. \r\n     Fascination with Paul Bunyan has continued to grow, and today he is a standard of American \r\nfolklore. The prevalence of Bunyan as a figure of folklore today is evidenced by references to him in \r\ncountless stories, cartoons, poems, and songs as well as the numerous community festivals and \r\nlogging competitions featuring Paul Bunyan that can be found throughout the sections of the country \r\n(30) where logging has a strong tradition.",
    "ans_a": "It endured for quite a time. ",
    "ans_b": "The company did not protect its ownership of the stories ",
    "ans_c": "The campaign did little to enhance the company's profitability",
    "ans_d": "The company wanted the name Paul Bunyan to be known as widely as possible.",
    "answer": "C"
  },
  {
    "number": "136",
    "type": "reading",
    "question": "The pronoun \"them\" in line 15 refers to",
    "text": "<b>Questions 132-140</b>\r\n\r\n     Paul Bunyan is perhaps America's best-known folk hero. A fictional logger of incredible \r\nstrength, he was most likely based on an actual nineteenth-century logger from the northern United \r\nStates or Canada. As a folk hero. he struck a chord with Americans on some level, perhaps because he \r\nwas incredibly strong but also because he was hard-working and capable, ingenious in solving \r\n(5) problems, and fun-loving.\r\n     Though there is evidence that Paul Bunyan tales were part of oral tradition in the nineteenth \r\ncentury, Paul Bunyan stories did not appear in written form until the early twentieth century. \r\nJournalist James McGillivray included descriptions of Bunyan in a series of essays entitled \"The \r\nRound River Drive,\" which appeared in a number of Midwestern newspapers between 1906 and 1910. \r\n(10) However, it was through an extensive advertising campaign that Paul Bunyan moved solidly into \r\nprint.\r\n     Recognizing the appeal of Paul Bunyan as a figure for his company's advertising, William \r\nLaughead, an advertising executive for the Red River Lumber Company, initiated a campaign that \r\nconsisted of a series of publications featuring Paul Bunyan. For several decades, the company \r\n(15) distributed these publications free of charge and made no attempt to obtain a copyright on them. In \r\nfact, the company vigorously encouraged other writers to make use of Paul Bunyan because it felt \r\nthat the use of this character enhanced the name recognition of the Red River Lumber Company \r\ninasmuch as the name of the folk hero and the name of the company had become interwoven. \r\n     The Bunyan stories published by Red River and further circulated by others were tall tales of \r\n(20) gigantic proportions. In these tales, Bunyan is depicted as a man of superhuman proportions, who is \r\nstrong, hard-working, entrepreneurial, and innovative. In one story, for example, Paul is credited with \r\ndigging the Great Lakes in order to create a watering hole for his giant ox, Babe. In another of these \r\ntales, Paul caused an entire winter of blue snow to fall by swearing a blue streak after he injured \r\nhimself by smashing his thumb with a large hammer. A third story in the series describes Paul's role \r\n(25) in establishing the Mississippi River. \r\n     Fascination with Paul Bunyan has continued to grow, and today he is a standard of American \r\nfolklore. The prevalence of Bunyan as a figure of folklore today is evidenced by references to him in \r\ncountless stories, cartoons, poems, and songs as well as the numerous community festivals and \r\nlogging competitions featuring Paul Bunyan that can be found throughout the sections of the country \r\n(30) where logging has a strong tradition.",
    "ans_a": "series",
    "ans_b": "decades",
    "ans_c": "publications",
    "ans_d": "writers",
    "answer": "C"
  },
  {
    "number": "137",
    "type": "reading",
    "question": "The word \"interwoven\" in line 18 could best be replaced by",
    "text": "<b>Questions 132-140</b>\r\n\r\n     Paul Bunyan is perhaps America's best-known folk hero. A fictional logger of incredible \r\nstrength, he was most likely based on an actual nineteenth-century logger from the northern United \r\nStates or Canada. As a folk hero. he struck a chord with Americans on some level, perhaps because he \r\nwas incredibly strong but also because he was hard-working and capable, ingenious in solving \r\n(5) problems, and fun-loving.\r\n     Though there is evidence that Paul Bunyan tales were part of oral tradition in the nineteenth \r\ncentury, Paul Bunyan stories did not appear in written form until the early twentieth century. \r\nJournalist James McGillivray included descriptions of Bunyan in a series of essays entitled \"The \r\nRound River Drive,\" which appeared in a number of Midwestern newspapers between 1906 and 1910. \r\n(10) However, it was through an extensive advertising campaign that Paul Bunyan moved solidly into \r\nprint.\r\n     Recognizing the appeal of Paul Bunyan as a figure for his company's advertising, William \r\nLaughead, an advertising executive for the Red River Lumber Company, initiated a campaign that \r\nconsisted of a series of publications featuring Paul Bunyan. For several decades, the company \r\n(15) distributed these publications free of charge and made no attempt to obtain a copyright on them. In \r\nfact, the company vigorously encouraged other writers to make use of Paul Bunyan because it felt \r\nthat the use of this character enhanced the name recognition of the Red River Lumber Company \r\ninasmuch as the name of the folk hero and the name of the company had become interwoven. \r\n     The Bunyan stories published by Red River and further circulated by others were tall tales of \r\n(20) gigantic proportions. In these tales, Bunyan is depicted as a man of superhuman proportions, who is \r\nstrong, hard-working, entrepreneurial, and innovative. In one story, for example, Paul is credited with \r\ndigging the Great Lakes in order to create a watering hole for his giant ox, Babe. In another of these \r\ntales, Paul caused an entire winter of blue snow to fall by swearing a blue streak after he injured \r\nhimself by smashing his thumb with a large hammer. A third story in the series describes Paul's role \r\n(25) in establishing the Mississippi River. \r\n     Fascination with Paul Bunyan has continued to grow, and today he is a standard of American \r\nfolklore. The prevalence of Bunyan as a figure of folklore today is evidenced by references to him in \r\ncountless stories, cartoons, poems, and songs as well as the numerous community festivals and \r\nlogging competitions featuring Paul Bunyan that can be found throughout the sections of the country \r\n(30) where logging has a strong tradition.",
    "ans_a": "unfashionable",
    "ans_b": "mixed together",
    "ans_c": "not compatible",
    "ans_d": "too separate",
    "answer": "B"
  },
  {
    "number": "138",
    "type": "reading",
    "question": "Where in the passage does the author discuss a weather phenomenon that Paul Bunyan supposedly caused?",
    "text": "<b>Questions 132-140</b>\r\n\r\n     Paul Bunyan is perhaps America's best-known folk hero. A fictional logger of incredible \r\nstrength, he was most likely based on an actual nineteenth-century logger from the northern United \r\nStates or Canada. As a folk hero. he struck a chord with Americans on some level, perhaps because he \r\nwas incredibly strong but also because he was hard-working and capable, ingenious in solving \r\n(5) problems, and fun-loving.\r\n     Though there is evidence that Paul Bunyan tales were part of oral tradition in the nineteenth \r\ncentury, Paul Bunyan stories did not appear in written form until the early twentieth century. \r\nJournalist James McGillivray included descriptions of Bunyan in a series of essays entitled \"The \r\nRound River Drive,\" which appeared in a number of Midwestern newspapers between 1906 and 1910. \r\n(10) However, it was through an extensive advertising campaign that Paul Bunyan moved solidly into \r\nprint.\r\n     Recognizing the appeal of Paul Bunyan as a figure for his company's advertising, William \r\nLaughead, an advertising executive for the Red River Lumber Company, initiated a campaign that \r\nconsisted of a series of publications featuring Paul Bunyan. For several decades, the company \r\n(15) distributed these publications free of charge and made no attempt to obtain a copyright on them. In \r\nfact, the company vigorously encouraged other writers to make use of Paul Bunyan because it felt \r\nthat the use of this character enhanced the name recognition of the Red River Lumber Company \r\ninasmuch as the name of the folk hero and the name of the company had become interwoven. \r\n     The Bunyan stories published by Red River and further circulated by others were tall tales of \r\n(20) gigantic proportions. In these tales, Bunyan is depicted as a man of superhuman proportions, who is \r\nstrong, hard-working, entrepreneurial, and innovative. In one story, for example, Paul is credited with \r\ndigging the Great Lakes in order to create a watering hole for his giant ox, Babe. In another of these \r\ntales, Paul caused an entire winter of blue snow to fall by swearing a blue streak after he injured \r\nhimself by smashing his thumb with a large hammer. A third story in the series describes Paul's role \r\n(25) in establishing the Mississippi River. \r\n     Fascination with Paul Bunyan has continued to grow, and today he is a standard of American \r\nfolklore. The prevalence of Bunyan as a figure of folklore today is evidenced by references to him in \r\ncountless stories, cartoons, poems, and songs as well as the numerous community festivals and \r\nlogging competitions featuring Paul Bunyan that can be found throughout the sections of the country \r\n(30) where logging has a strong tradition.",
    "ans_a": "Lines 8-9",
    "ans_b": "Lines 14-15",
    "ans_c": "Lines 19-20",
    "ans_d": "Lines 22-24",
    "answer": "D"
  },
  {
    "number": "139",
    "type": "reading",
    "question": "The word \"countless\" in line 28 could best be replaced by the expression",
    "text": "<b>Questions 132-140</b>\r\n\r\n     Paul Bunyan is perhaps America's best-known folk hero. A fictional logger of incredible \r\nstrength, he was most likely based on an actual nineteenth-century logger from the northern United \r\nStates or Canada. As a folk hero. he struck a chord with Americans on some level, perhaps because he \r\nwas incredibly strong but also because he was hard-working and capable, ingenious in solving \r\n(5) problems, and fun-loving.\r\n     Though there is evidence that Paul Bunyan tales were part of oral tradition in the nineteenth \r\ncentury, Paul Bunyan stories did not appear in written form until the early twentieth century. \r\nJournalist James McGillivray included descriptions of Bunyan in a series of essays entitled \"The \r\nRound River Drive,\" which appeared in a number of Midwestern newspapers between 1906 and 1910. \r\n(10) However, it was through an extensive advertising campaign that Paul Bunyan moved solidly into \r\nprint.\r\n     Recognizing the appeal of Paul Bunyan as a figure for his company's advertising, William \r\nLaughead, an advertising executive for the Red River Lumber Company, initiated a campaign that \r\nconsisted of a series of publications featuring Paul Bunyan. For several decades, the company \r\n(15) distributed these publications free of charge and made no attempt to obtain a copyright on them. In \r\nfact, the company vigorously encouraged other writers to make use of Paul Bunyan because it felt \r\nthat the use of this character enhanced the name recognition of the Red River Lumber Company \r\ninasmuch as the name of the folk hero and the name of the company had become interwoven. \r\n     The Bunyan stories published by Red River and further circulated by others were tall tales of \r\n(20) gigantic proportions. In these tales, Bunyan is depicted as a man of superhuman proportions, who is \r\nstrong, hard-working, entrepreneurial, and innovative. In one story, for example, Paul is credited with \r\ndigging the Great Lakes in order to create a watering hole for his giant ox, Babe. In another of these \r\ntales, Paul caused an entire winter of blue snow to fall by swearing a blue streak after he injured \r\nhimself by smashing his thumb with a large hammer. A third story in the series describes Paul's role \r\n(25) in establishing the Mississippi River. \r\n     Fascination with Paul Bunyan has continued to grow, and today he is a standard of American \r\nfolklore. The prevalence of Bunyan as a figure of folklore today is evidenced by references to him in \r\ncountless stories, cartoons, poems, and songs as well as the numerous community festivals and \r\nlogging competitions featuring Paul Bunyan that can be found throughout the sections of the country \r\n(30) where logging has a strong tradition.",
    "ans_a": "a large number of",
    "ans_b": "a specified number of",
    "ans_c": "an insubstantial number of",
    "ans_d": "an overestimated number of",
    "answer": "A"
  },
  {
    "number": "140",
    "type": "reading",
    "question": "Which paragraph describes the plots of some of the tales of Paul Bunyan?",
    "text": "<b>Questions 132-140</b>\r\n\r\n     Paul Bunyan is perhaps America's best-known folk hero. A fictional logger of incredible \r\nstrength, he was most likely based on an actual nineteenth-century logger from the northern United \r\nStates or Canada. As a folk hero. he struck a chord with Americans on some level, perhaps because he \r\nwas incredibly strong but also because he was hard-working and capable, ingenious in solving \r\n(5) problems, and fun-loving.\r\n     Though there is evidence that Paul Bunyan tales were part of oral tradition in the nineteenth \r\ncentury, Paul Bunyan stories did not appear in written form until the early twentieth century. \r\nJournalist James McGillivray included descriptions of Bunyan in a series of essays entitled \"The \r\nRound River Drive,\" which appeared in a number of Midwestern newspapers between 1906 and 1910. \r\n(10) However, it was through an extensive advertising campaign that Paul Bunyan moved solidly into \r\nprint.\r\n     Recognizing the appeal of Paul Bunyan as a figure for his company's advertising, William \r\nLaughead, an advertising executive for the Red River Lumber Company, initiated a campaign that \r\nconsisted of a series of publications featuring Paul Bunyan. For several decades, the company \r\n(15) distributed these publications free of charge and made no attempt to obtain a copyright on them. In \r\nfact, the company vigorously encouraged other writers to make use of Paul Bunyan because it felt \r\nthat the use of this character enhanced the name recognition of the Red River Lumber Company \r\ninasmuch as the name of the folk hero and the name of the company had become interwoven. \r\n     The Bunyan stories published by Red River and further circulated by others were tall tales of \r\n(20) gigantic proportions. In these tales, Bunyan is depicted as a man of superhuman proportions, who is \r\nstrong, hard-working, entrepreneurial, and innovative. In one story, for example, Paul is credited with \r\ndigging the Great Lakes in order to create a watering hole for his giant ox, Babe. In another of these \r\ntales, Paul caused an entire winter of blue snow to fall by swearing a blue streak after he injured \r\nhimself by smashing his thumb with a large hammer. A third story in the series describes Paul's role \r\n(25) in establishing the Mississippi River. \r\n     Fascination with Paul Bunyan has continued to grow, and today he is a standard of American \r\nfolklore. The prevalence of Bunyan as a figure of folklore today is evidenced by references to him in \r\ncountless stories, cartoons, poems, and songs as well as the numerous community festivals and \r\nlogging competitions featuring Paul Bunyan that can be found throughout the sections of the country \r\n(30) where logging has a strong tradition.",
    "ans_a": "The second paragraph ",
    "ans_b": "The third paragraph",
    "ans_c": "The fourth paragraph",
    "ans_d": "The fifth paragraph",
    "answer": "C"
  }
]